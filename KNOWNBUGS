EPIC4 Projects, Bugs, and other Errata:

KNOWN ERRATA (eg, bugs, or unresolved requests):
------------------------------------------------
* A missing 'else' in create_additional_screen causes gnu screen to be
  prefered over X windows.  Should this be fixed, or at least made an option?
  Maybe try X, fall back to gnu screen on failure?
* Should /set beep off suppress stripping of beeps?
* /TYPE honors keybindings, and calls edit_char(), but /XTYPE -L does not 
  honor key bindings because it calls input_add_character().
* Study update_input() and update_all_windows() and determine if used properly
* Shall remove_trailing_spaces honor a \ before a space trailing?
* Some way to color the input prompt?  (Probably not)
* The way the pattern matcher handles ?'s after *'s is really lame.
* /window disconnect (server -> -2) + /server 0 reconnects to previous server.
* New math parser can't handle  @ foo[bar].baz = 0
* Some way to get the client's global default nickname?

[See http://www.epicsol.org/PROJECTS for things to come in the future]
[See http://www.epicsol.org/CHANGELOG for things that changed in the past]

THE CHANGELOG SINCE THE LAST RELEASE:
-------------------------------------
* Add the 'paste' script, implements "paste only" mode, for anguzhawk.
* Better to use (ssize_t) instead of (int) when dealing with string lengths.
* New /IGNORE implementation, see UPDATES for all the gory details.
* New built in function, $ignorectl(), see UPDATES for gory details.
* Add provisional strlcpy_c(), strlcat_c(), strlopencat_c() funcs to ircaux.c
* Add provisional is_empty() function to ircaux.c for new ignore stuff.
* Move the "highlight char" stuff from ignore.c to irc.c and vars.c
* Make figure_out_address take a (const char *) since it doesn't change it
* Document all the ignore stuff
* Fix set_server_away() to accept changed away messages (rb hsoc)
* Fix bug where reading gzipped files would fail if gunzip was symlink to gzip.
* Add 'creation', 'last_used' time and usage counter to ignores
* Add support to $ignorectl() to get/set three above values.
* Don't do WHOWAS on channels in 401.
* Add $dccctl([GET|SET] <refnum> OFFERADDR), the address in the handshake.
* Add metric time support -- measured in millidays
* Add $metric_time(), which returns <days> <millidays> since epoch.
* Add /set metric_time, which makes epic's clock go metric! (default off)
* Break update_clock() into three clocks; standard, metric, and broken
* Move #define CTCP_* into ctcp.h
* Add /xdebug extractw_debug
* Move #define LOCAL_COPY and SAFE into irc_std.h
* Create compat.h, move all the compat.c decls into there (from ircaux.h)
* Create network.h, move all the network.c decls into there (from ircaux.h)
* Create words.h, move all the words.c decls into there (from ircaux.h)
* Include "compat.h" and "network.h" in ircaux.h
* Do another round of make depends
* Rename 'search' to 'search_for'.
* Fix the metric clock hooking /on timer too much.
* Revamp words.c, to support passing word quoter (' or ") as an argument.
* Add support for clock_gettime(), a posix version of gettimeofday()
* Migrate all use of m_sprintf() over to malloc_sprintf()
* Make malloc_sprintf() support a NULL first argument to simulate m_sprintf().
* Fix some stragglers and GC unused m_sprintf() function.
* Fix $serverwin() which was doing a bogus check on server refnums.
* Add malloc_strcpy_c, malloc_strcat_c, malloc_strdup, malloc_strdup2,
  malloc_strdup3, malloc_strcat2_c, malloc_strcat_wordlist_c, to ircaux.h.
* Fix some pesky const correctness issues with qsort callback args.
* Convert m_strdup() to malloc_strdup().
* Convert parse_line_with_return() to call_lambda_function().
* Nix channel_window, duplicate of get_winref_by_channame()
* Make arglist processor panic if it sees an argtype that doesn't exist.
* Fix bug with * operator in exprs like (a ? b : *c) in new expression parser.
* Fix theoretical crash with deleting hooks from /on window. Bleh.
* General cleanups in if.c.
* Fix /timer -list acting all wacky.
* Fix compilation warnings, you know the deal...
* Convert m_[s]c3cat[_s]() to malloc_strcat_wordlist_c()
* Nix m_e3cat(), m_s3cat(), m_s3cat_s(), m_3cat()
* Nix m_ec3cat(), m_sc3cat(), m_sc3cat_s(), m_c3cat().
* Convert m_dupchar() to malloc_dupchar().
* Convert m_strndup() to malloc_strndup().
* Make malloc_strcpy/malloc_strcat/malloc_strcat2/malloc_strcat_wordlist macros
* Convert m_2dup() to malloc_strdup2().
* Convert m_3cat() to malloc_strcat2[_c]().
* Convert m_3dup() to malloc_strdup3().
* Convert m_ec3cat() to malloc_strcat2_c()
* Use strlcat_c() in $repeat() instead of strlcpy(). whee!
* Sanity check first arg to $regcomp(), to avoid crashes.
* Don't pass NULL to bsearch(), even if 'nmem' is 0 [$remws()]
* Nix the original malloc_strcpy (supplanted by malloc_strcpy_c)
* Comment out all the deprecated functions
* Nix include/crypt.h and do another make depend.
* Roll in the new universal_next_arg_count() and attendant macros.
* Comment out some deprecated function decls in ircaux.h
* Do another round of make depends.
* Modify alias arglist code to use the new universal_next_arg_count() stuff
* Convert dequote() to dequoter().
* Convert new_new_next_arg() into new_new_next_arg_count().
* Comment out deprecated functions in ircaux.c -- will be deleted later.
* Fix a couple of compiler warnings from freebsd-5
* Revamp move_to_prev_word() so its behavior isn't stinky
* Same thing with move_to_next_word(), and they need to be commented.
* Now move_to_abs_word() doesn't need to skip leading spaces.
* Remove now pointless "strip extraneous spaces" feature.
* Don't worry about cheating in real_extractw
* Fix last_arg() per all of the above
* Fix bug where $<num> (as the last word) would chop off the last character
* It is necessary to remove trailing spaces for $<num>, historical practice.
* Make /load trap the /return command -- see doc/pf-loader for why.
* Add #define MINIMUM_CLOCK_INTERVAL and MINIMUM_MAIL_INTERVAL in config.h
* Add #define DEFAULT_CLOCK_INTERVAL and DEFAULT_MAIL_INTERVAL in config.h
* Add reset_system_timers(), do_update_clock(), and set_cpu_saver_after()
* Add time_to_next_interval(), general form of time_to_next_minute().
* Add get_clock() and reset_clock() to replace update_clock().
* Make remove_timer() an extern function so i can delete timers. ;-)
* Add /SET CLOCK_INTERVAL and /SET MAIL_INTERVAL
* Make $T use the static clock.
* Reorganize system timers 1 and 2 into four timers:
* - CPU SAVER timer, checks for idleness, to turn on cpu saver
* - CLOCK timer, updates the status bar clock periodically
* - MAIL timer, checks for new mail periodically
* - NOTIFY timer, checks for others on irc periodically
* The above three honor "cpu saver" mode.
* Nix the old "do_every_minute" timer.
* Reorganize the clock generation stuff into "reset_*_clock" functions
* Generate the clock statically; only update it from the CLOCK timer
* Add reset_system_timers() which regenerates all four system timers.
* Don't set system timers in main, call reset_system_timers() instead.
* Don't enforce "notify interval" in do_notify(), handle that in NOTIFY timer.
* Comment stuff in words.c
* Change #define DEFAULT_CPU_SAVER_EVERY to 60, it needs not be 0.
* Create 'clock.c', to hold clock generation, system timers, cpu saver watchdog
* Create notion of "sys(tem)timers", callbacks for mail, notify, clock gen.
* Add 'system_timer', generalized callback for all of the system timers.
* Fix add_timer() so the 'command' argument does what the docs say it does.
* Extern 'timer_exists' so we don't try to remove_timer() and invalid timer
* Redo dependancies because clock.h exists.
* Add code to bootstrap mail systimer with /set mail
* Add code to bootstrap clock generation with /set clock
* Add code to bootstrap notify handling with /set notify_interval.
* Start enforcing "NOTIFY_INTERVAL" again in do_notify() to avoid excess flood.
* Maybe I fixed the "(Mail: )" bug?  Maybe not.
* Don't allow user to /window number in a window with a channel (avoid panic)
* Make check_mail return a (const char *), fix status_mail().
* Modularize/reorganize mail checking, with mbox reference implementation.
* Automatically /set mail 0 if the user's mbox can't be found.
* Fix time functions to take (const Timeval) if they don't change the arg.
* Create a special handler for /squit to avoid sending QUIT * to server.
* Protect some IPv6 stuff i added recently to dcc with #ifdef INET6.  Ooops.
* Hack up $repeat(<num><space><space>) so it works again. ugh.
* Hack up /set <variable><space><space> so it works again.  ugh.
* Dont allow /timer -repeat -1 0 because that busy-loops.
* Add shell of $windowctl() which will be filled in going forward.
* Add a more sensible 'make installhelp' rule, courtesy of Steven Plunkett
* Don't prohibit universal_next_arg_count() from returning empty_string.
* Rework the bug report form to point people to the bugs website
* Add /lastlog -target.
* Protect against panic if you do dcc while not connected to server
* Protect against panic if /set mail 0 is off by default
* Add "ON/OFF" toggle set variable to the system timer data.
* Create 'update_system_timer' which uses the "toggle" var to run or stop timer
* Merge '(start|stop)_system_timer' into 'update_system_timer'
* Nix #define MINIMUM_(NOTIFY|CLOCK|MAIL)_INTERVAL since we can't stop that.
* Do not enforce minimums for /SET *_INTERVAL since user could get around it.
* Track "last event" time, maybe I'll use that in the future
* Reset "now" global variable before calling timer callback.
* Fix null deref bug with $($$)
* Add default binding to ^G to "self_insert" for beeps.
* Do not enforce MINIMUM_NOTIFY_INTERVAL in do_notify()
* Don't include exec.h from screen.c
* Add 'number' (floating point) field to /set's
* Add FLOAT_TYPE_VAR type for /set's, using 'number' field
* Update all the /set entries to include a default 'number' field.
* Add get_float_var() to get the 'number' field in a set.
* Add set_float_var() to set the 'number' field in a set.
* Teach set_variable() about FLOAT_TYPE_VAR sets.
* Teach save_variables() about FLOAT_TYPE_VAR sets.
* Teach get_string_variable() about FLOAT_TYPE_VAR sets.
* Change all /SET callback functions to take (const void *).
* Fix some rather obvious bugs.  I take the blame for all this.
* Fix $<num> to not have leading or trailing spaces, cause zinx said so. ;-)
* Fix real_extract2 because I'm a moron.  Ugh.  (bugref 4)
* Add nsx's 'tabkey.jm' script.
* Fix some compile warnings, use (intptr_t) -- i hope this doesn't bite me.
* Fix $push(:foo   ) and $unshift() too, (bugref 5)
* Change word handling for eg, [foo   ] so $0 is [foo] and $1 is [  ].
* Include <stdint.h> or <inttypes.h> if they exist.
* Reorganised, documented and generally screwed around with data_array/struct.
* Very minor syntax changes to script/functions and script/deban.
* Fix buffer overrun crash with CTCP UTC.
* Fix /dcc chat nick -p 4444
* Return empty string if you do $aliasctl(pmatch <bogus> <whatever>)
* Update some copyright notices.
* Fix panic from $push(:foo )
* Revert all uses of LOG_CURRENT to LOG_CRAP
* Change all uses of message_to(0) to message_to(-1)
* Fix show_help() to not change to_window, it doesn't need to care about that.
* Fix help_put_it() to not change message_from, doesn't need to care about it.
* Fix /lastlog to use message_to(0) to send all output to current window.
* Don't make output of /log go to current window -- no point to that.
* Teach add_to_screen() to honor from_server's current window for LOG_CURRENT
* And for /set current_window_level as well
* Fix message_from() not to save/restore lastlog level, doesn't need to care.
* All of this pretty much nukes LOG_CURRENT except for /window, HUZZAH!
* Make /window swap update the current-window-priority thingee.
* Fix /on ctcp_reply so it hooks in the LOG_CTCP context. (rb nsx)
