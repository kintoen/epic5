EPIC5 Projects, Bugs, and other Errata:

KNOWN ERRATA (eg, bugs, or unresolved requests):
------------------------------------------------
* Some way to hook incomplete lines via dcc raw
* Some way to set ipv4 and ipv6 vhosts separately?
* Make it easier to script your own altnick stuff.
* Changing attribute in the middle of a word that totaly wraps does not
  "bleed" to subsequent lines (ie, ^C34<40 a's> <40a's>^C35<100 a's>

[See http://www.epicsol.org/PROJECTS for things to come in the future]
[See http://www.epicsol.org/CHANGELOG5 for things that changed in the past]

THE CHANGELOG SINCE THE LAST RELEASE:
-------------------------------------
* Nix auto-append-of-$* feature (args_flag to expand_alias/parse_inline) HUZZAH!
* Fix provided scripts to add $* when necessary.
* Fix up Makefile, configure, et al, to use epic5/ directories.
* Make message_from() work from a queue; call pop_message_from() to GC
* Removed unused variables
* Add /xdebug message_from to watch the message_from queue at work.
* Nix save_message_from(), restore_message_from(), unneeded now.
* Remove /set beep_on_msg, a half-broken feature which can be scripted.
* Nix /set beep_when_away, a 1-line scriptable feature.
* Add new noise level %, (/ON %TYPE); like ^ but doesn't turn off display
* Use message_from() for setting all target/levels
* Nix set_lastlog_message_level(), have lastlog use who_level/who_from now
* Make message_from() use a queue to store old values
* Make everybody pop off their message_from() under pain of panic
* This ensures every output context can be safely interrupted!  HUZZAH!
* Unify the flood, ignore, and lastlog levels.
* *_FLOOD -> LEVEL_*, LOG_* -> LEVEL_*, IGNORE_* -> LEVEL_*
* Add KICK, QUIT, and MODE levels
* Nix #define DEFAULT_BEEP_ON_MSG and #define DEFAULT_BEEP_WHEN_AWAY
* Differentiate between a "mask" (bitmask) and a "level" (integer)
* Don't call them "lastlog levels" any more, they're just "levels"
* Create levels.h, which contain the definitions for all of the level stuff
* Create macro, _X(x) which converts a level name to a mask
* Create macro, _Y(x) which converts a level integer to a mask
* Nix beep_on_level global variable
* Create "Mask" struct which contains an integer to hide a "mask" behind.
* This prevents me from comparing a "mask" to a "level" by mistake.
* Convert many functions and variables to the "Mask" type
* Rename a bunch of functions and variables that use "mask" and not "level"
* Make KICKs, PARTs, QUITs, MODEs, et al use their new special levels!
* All levels now mean everything in every context!  HUZZAH! 
* Make empty_string const.  Now we're cooking with gas! 
* Const correctness madness!
* Compile /ON patterns into regexes and use regexec() to parse them.
* Fix matching of /on type "*" to always have a weight of 1. (rb adm)
* Tack a ^ and $ onto regexes in pattern2regex().
* Flexible hooks need to have 'hook->regexpr' set to NULL to avoid segfault
* commit 1013:
* Use a "status" variable in server, instead of a plurality of binary flags
* Process usermodes as strings only.
* Nix 'flags', 'flags2' and 'umodes', 's_takes_arg', and 'eof'.
* Change update_user_mode() to take a server refnum.
* Nix $serverctl(... UMODES)
* Change server_is_registered() so it takes a server name and our nickname.
* Add server_is_unregistered() which i'll use in the future.
* Hook /on server_lost all the time in close_server() by popular request.
* Make $version() always return "2.8" since all servers are 2.8 servers.
* Check /set auto_rejoin_connect at disconnect-time, instead of connect-time.
* Use a "is_server_active()" function instead of "did_server_rejoin_channels"
* Move the guts of got_initial_version_28() into server_is_registered()
* Call "server_is_registered()" from 001, which loads ircrc among other things.
* Reduce 004 so it only sets the server's version string id.
* Nix got_initial_version_28
* Allow client_connect() to be nonblocking
* Allow Getaddrinfo() and Freeaddrinfo() to be called extern.
* Track writable sockets in 'global_max_fd' too.
* Keep a list of AI's for server addresses in the server code
* When server connection lost before registration, use the next AI
* Implement set_server_status(), which controls where server is in lifetime
* Nix reconnect(), which is replaced by close_server + set_server_status().
* Nix server_reconnects_to(), we no longer reconnect to servers.
* Make /xdebug server_connect the default for this commit at least
* Call window_check_servers() every time through io(), because...
* Make window_check_servers() look for disconnected servers and restart them.
* Add add_mode_to_str() which adds a channel or usermode to a string (sorted)
* Make usermodes use add_mode_to_str()
* Make channel modes use add_mode_to_str()
* Now modes are not stored in bitmasks, not hard-coded at compile time. HUZZAH!
* Nix "inactive" field in channels, channels are thrown away at disconnect
* Don't allow channels to move between servers, natch.
* Nix all the code to handle disconnected channels and such.
* Use change_window_server() to move windows to new servers, because...
* Make window_check_servers() auto-close windowless servers.
* Make change_window_server(<server>, NOSERV) cause a disconnect from <server>
* Don't honor /set auto_reconnect, we don't ever reconnect.
* Fix printf() error in /on kick default output
* Add new server state, SERVER_RECONNECT which means "i can be connected"
* So now SERVER_CLOSED means "don't reconnect me"
* Allow /server, /window server, and /reconnect to change CLOSED -> RECONNECT
* Make server connections nonblocking.
* Server connections are now nonrecursive, nonblocking, multi-protocol. HUZZAH!
* GC a bunch of server code dealing with reconnection we don't use now.
* Don't call window_check_servers() other than io() for sanity reasons.
* Make /window server just change server, let w_c_s() bootstrap connection
* Remove many window->channel->server sanity checks.
* Backslash a bunch of regular pattern chars that are metachars in regexes
* Nix note support
* Revamp notice.c for its eventual assimiliation into parse.c
* Assimilate notice.c into parse.c.  *poof*
* Fix some compiler issues and so forth
* Nix the NOTE level.
* Move load_ircrc() to irc.c, nix "startup_file" global var.
* Always change server state using set_server_status(), because...
* Add /ON SERVER_STATUS, $0 is refnum, $1 is old state, $2 is new state
* Delete /on widelist, no longer used
* Prototype mode string manipulation functions
* Reorganize names.h to reflect new realities
* Prototype (Get|Free)addrinfo() now that server.c uses them.
* Nix /window bind, rebind, unbound; $windowctl(* BIND_CHANNEL *)
* Be careful what modes we add to modestr in update_channel_mode.
* GC some old epic4 macros which we don't use
* Fix a typo that b0rked /on server_status
* Force output for a server connection to go to its connected window.
* Make /server reset server's status, so it can be reconnected to.
* Make /reconnect work on servers that are not already open.
* Don't just cavalierly change window's servers.
* Prefer close_server(i, NULL); over change_window_server(i, NOSERV);
* Allow windows to stay connected to closed servers.
* Nix window's "old server", now they're unnecessary.  HUZZAH!
* Mop up channel stuff that coped with window-old-server.
* Break backwards compatability and make /window +<server> reconnect to ser.
* Break backwards compatability and make /window -<server> disconnect from serv
* Hide a bunch more debugging output behind /xdebug server_connect
* Refactor change_window_server().
* Make /window discon the same as /window noserv, total disconnection.
* Don't do anything on 465 (YOUREBANNEDCREEP) -- this will be scripted
* Totaly refactor /SERVER -- documentation of course yet to come!
* Make new_open[_for_write] take a callback function, stash it in io_rec.
* Add handle_filedescs() which takes select() results and calls callbacks
* Make io() call handle_filedescs() instead of the four callback functions.
* This is the first stage of an extendable callback event looper!  huzzah!
* Fix io() to call do_server(-1) to do ssl timeouts. bleh.
* Hide new_select() behind wait_select(), which will hold the result fd_set's
* Don't make do_filedesc() take fd_set's, but rather get them from wait_select.
* Be cautious and when redrawing one screen, redraw all screens.
* Refactor io() some more; no explicit dependancy on select() now
* Refactor io(), optimize placement of some of the post-select operations.
* When wserv changes size, recalculate windows, and allow io() to redraw it.
* Fix typo in do_server() that caused a blocking read. doh! (rb adm)
* Abstract fd handling in newio.[ch] through #defines
* Add fd handling with freebsd's kqueue().  Huzzah! (not turned on by default)
* Refactor how dgets() works with incomplete SSL reads, slurp up everything
* Nix the bletcherous do_server(-1) hack in io().
* Fix a few more bogons in do_server().
* Abstract the reading function out of dgets() via an argument
* Add unix_read(), the default reader for dgets()
* Add ssl_reader(), a dgets-like reader for SSL connections
* Add server_ssl_reader(), a dgets reader for servers using SSL.
* I probably broke SSL servers by doing this -- report bugs please!
* Import epic4 commits 674 through 692, inclusive.
* Import epic4 commits 693 through 710, inclusive (epic4-2.0 final)
* Change _X and _Y macros to LEVEL and LEVELMASK for linux (sigh)
* Add a searchbuf() 8 bit clean byte-finder for future use.
* Convert flood checking, ignore checking, lastlog, logfiles to int masks.
* Convert message_from to int masks.
* Undo that lame damage -- convert all level handling to "signal-like"
* Each level is individual, and masks are stored in types like (sigset_t).
* Comparing one mask against each other requires O(N^2) operation. bummer.
* But now levels are officially stored in opaque data type!
* And that data type is not limited to 32 bits! HUZZAH!
* Add 6 new lastlog levels (USER5-USER10) to celebrate.
* Reduce the size of level masks to 1 byte, to save cpu.
* Add turn_on_level() and turn_off_level(), for reasons that escape me.
* Nix the /help command, make howl's scripted replacement the default.
* Add $cofilter() entry so you can use it (it was already written)
* Make dcc connections ($connect, /dcc get, /dcc chat) nonblocking
* /DCC RESUME is totaly broken by this.  Will fix later, maybe ;-)
* Add $startupfile(), which returns the epicrc/ircrc file that was loaded
* Offer unknown ctcp requests through /on ctcp_request before /on ctcp.
* Fix /DCC RESUME so it works with nonblocking connects.
* GC all of the blocking connect code.  EPIC is fully nonblocking connect!
* Make sure that servers go through SERVER_EOF state on eof!
* Track waiting/pending channels using a nicklist per window.
* Nix $winbound() and all the other stuff relating to bound channels
* Fix bug with binding/initializing the 255 key
* Fix bug with TOGGLE_STOP_SCREEN keybinding.
* Revamp /window describe so it includes a lot more useful info.
* Wrap send_ctcp in message_from()s to send to the right window.
* Add /xecho -f, which suppersses widnow notify events (%F)
* Move Lastlog definition to lastlog.c, leave stub behind for window.h
* Add window_all_channels(), return all windows for channel from names.c
* Change boolean vartype for windows and status: int -> short.
* Add do_short_boolean(), like do_boolean(), but it takes a short.
* Make the default server quit message "Leaving"
* Have /window describe show all the channels in a window.
* Have /window describe show nicks, channels in flat list, not one per line.
* Make sure to use the server's default quit message when closing it.
* Create a prototype of atoll() for compat systems.
* If a /set indent line would indent > 1/3 of the screen, indent to 1/3, not 0.
* Add a counter to WNickList, for tracking queries
* Each window gets a "current query counter", to find it's current query.
* Adding nicks with /window add <A>gives them query counters of 0
* Adding nicks with /window query <A> gives them next higher query counter.
* Removing query with /window query, still removes <A> from nick list!
* New binding "SWITCH_QUERY" to switch between queries, duh!
* Nix "query_list" in Window, totaly dynamic now, huzzah!
* Fix places using "query_list" to use "get_equery_by_refnum()"
* Refactor add_to_screen(). wheee!
* Change "Update %H on status bar..." to "Update %B on status bar..."
* So $windowctl(... QUERY_NICK ...) returns empty string now.
* Split (Window)->miscflags into "notify_when_hidden" and "notified"
* Add $windowctl(... NOTIFY ...) and $windowctl(... NOTIFIED ...)
* Change $windowctl(GET <refnum> MISCFLAGS) to always return 0.
* Make /window notify and /window notified take ON|OFF|TOGGLE.
* New function, $strtol(<base> <num>), convert <num> in base <base> to base 10.
* New function, $tobase(<base> <num>), convert <num> in base 10 to base <base>.
* GC a bunch of unused code, unused files, that kind of stuff.
* Make all of the level names plural, it's more forgiving that way.
* Fix /window channel.  Ooops!
* Add a timer list dump for when a polling loop is detected.
* Prefer timers over i/o to avoid the polling loop bug. ick.
* Move some defines from comands.h to where they belong
* Add and remove func decls in header files as necessary.
* Add /wait =<fd> which returns when a nonblocking dcc connection finishes
* Make all keybinding funcs/decls use the BUILT_IN_KEYBINDING macro.
* Make the BUILT_IN_KEYBINDING macro use unsigned chars.
* Hide (struct Key) inside keys.c, and use (void *) to hold state.
* Make the input line use (unsigned char), not (char), huzzah!
* Make the "othername" ($3 in /on dcc_raw "E") the port number.
* Avoid a NULL deref with "parse_command" keybinding.
* Fix (maybe?) a NULL deref with prepare_display() that hsoc tripped across.
* Revert all the regex stuff for /on's -- the idea needs a lot more thoguht.
* Create one unified "hook" table for numerics and named hooks
* Nuke "numeric lists" as separate beast in hook.c
* Refactor code to only worry about one hook table. 
* Refactor do_hook() to re-start at start of list every time /on runs
* This makes it 100% safe to edit/delete /on's from within /on's, HUZZAH!
* Revert /on type ^"pattern" to epic4 behavior (suppressive action)
* Add /on type !"pattern" to act like ircII's /on type ^"pattern" (exceptive)
* Add /window kill_all_others for rain.
* Add /set old_server_lastlog_level, for when you merge windows to servers.
* Add %{2}W status expando for black, shows /set status_window in all windows.
