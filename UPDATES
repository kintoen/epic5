EPIC4-1.2.0

*** News 10/19/2003 -- You can now /SET DEBUG 7 and /SET OUTPUT_REWRITE
        at the same time.  I fixed it with a technical workaround the details
        of which would probably bore you. ;-)

*** News 10/19/2003 -- /XEVAL -- now ends option processing
	If you do /XEVAL -- <whatever> then <whatever> will be executed
	as a command and no further options will be parsed.  This came up
	becuase /XECHO -- does this, and someone figured out that '/' was
	also an option argument and that got in the way of doing a built
	in command, for example:
		/XEVAL -- //MSG hop testing!

*** News 10/10/2003 -- New built in script, 'hold_mode'
	This script implements the /set hold_mode and /set hold_mode_interval
	semantics of ircII.  Particularly, when you create a new window, the
	current global values of these /set's are set for the new window.
	Those who want ircII-like hold_mode behavior should definitely /load
	this script in their .ircrc!

*** News 10/10/2003 -- New setting, /SET HOLD_SLIDER, /WINDOW HOLD_SLIDER
	The "HOLD_SLIDER" controls what percentage of your window must scroll
	by before the window starts holding further output; and how much held
	output is displayed each time you use the SEND_LINE keybinding (the
	<enter> key).  Traditional ircII semantics would use a value of 100
	(a full window is scrolled by each time you hit <enter>), and the
	more recent epic behavior would use a value of 0 (the window always
	holds new output, and you must use SCROLL_FORWARD (<page down>) to 
	see the new output.  This can be set on a window-by-window basis or
	set globally.  The default is 100 (traditional ircII hold_mode)

*** News 10/10/2003 -- Modifications to /WINDOW HOLD_MODE system
	When a window is in hold_mode, it allows some number of lines to 
	be displayed and then any further lines are "held" or not displayed
	until the user takes some definite action to display them.  The user
	can display ("unhold") held lines by using the SCROLL_FORWARD keybind
	(<page down>) or the SEND_LINE keybind (<enter>).  For SCROLL_FORWARD,
	the number of lines unheld is controlled by /SET SCROLLBACK_RATIO,
	and for SEND_LINE, it is controlled by /SET HOLD_SLIDER.

	The traditional ircII behavior for hold_mode is simulated by using
	/set hold_slider 100 and /load hold_mode.  Each time you hit <enter>
	a full window of output is unheld, and if no data was unheld, then 
	a full window of output will appear before new output gets held.

	The more recent epic behavior for hold_mode is simulated by using
	/set hold_slider 0.  All new output is always held, and hitting
	<enter> does not unhold output, but rather you must use <page down>
	to scroll forward through the held output until you hit the bottom.

*** News 10/10/2003 -- No more "half blank window"
	If you don't know what I'm explaining here, don't worry about it.
	If you do know, then you'll be happy to hear about this.  Previously,
	If you did <page up> then a line of output occured and you hit 
	<page down> twice, then half the window would be empty.  It seemed
	a lot of people hated this so I "fixed" it as part of the hold_mode
	stuff.

*** News 10/10/2003 -- Per-DCC store paths (sort of)
	You can now /DCC RENAME <nick> <file> <absolute path> to override
	the /SET DCC_STORE_PATH for a particular DCC.  For example:
		/SET DCC_STORE_PATH ~/downloads/
		/DCC RENAME hop myfile.txt /tmp/myfile.txt
		/DCC GET hop
	Before this change, the file would be saved as:
		~/downloads/_tmp_myfile.txt
	but now it will be properly saved to
		/tmp/myfile.txt

*** News 10/10/2003 -- Servers now track their own current windows
	As you probably know, EPIC has a "global current window" and each of
	your screens has its own "current window".  Now each server will 
	track its "current window".  Each time you set a new current window
	in one of your screens, that window will become its server's current
	window.  This information will be used for /SET CURRENT_WINDOW_LEVEL.
	This means that when output to a level in /SET CURRENT_WINDOW_LEVEL
	occurs from servers that are not the current window's server, it will 
	now go to that server's "current window" instead of being ignored 
	like it has up until now.

*** News 10/10/2003 -- EPIC now uses 004 and 005 numeric values
	There are many different networks out there who use usermodes and 
	channel modes for different things.  Sometimes, a mode may take an 
	argument on one server but not on another server.  In order to allow 
	clients to do the sensible thing, servers are supposed to send right
	and proper values in the 004 and 005 numerics to tell the client what
	modes are available and whether they take an argument or not.  EPIC
	now will use these values.  Occasionally, a server will be in error
	and fail to report a usermode it supports, or will falsely report it
	as taking an argument when it doesn't, or vice versa.  Whenever a 
	problem like this occurs, EPIC will output a warning message telling
	you that it had to assume something about your server that the server
	did not relay correctly to EPIC.  These messages are harmless and 
	you can usually ignore them, but if you get a message and EPIC does
	do something weird, the mode change may be at fault.  You can talk
	to your friendly server administrator about the problem.

*** News 09/25/2003 -- $servernick(<global>) now returns global nickname
	I just know I'm going to regret this...  If you want to get the
	client's global current nickname (which is used for new servers
	added to your server list), you can pass the literal string <global>
	to the $servernick() function to get it.

*** News 08/30/2003 -- New function $randomread() in the files script.
	It works much like the $randread() builtin, but it avoids certain
	potential bugs, and will return one line from each specified file.

*** News 08/30/2003 -- commandqueues script updates.
	q1cmd now permits you to specify multiple comma separated queues
	to test against for the specific purpose of blocking.  The command
	will only be queued on the first.

	qcmd now makes reference to a non-existant function called
	$islagged().  If this returns a true value, qcmd will stop right
	there so that the server doesn't get mistakenly flooded.

*** News 08/30/2003 -- Autoget script enhanced.
	A new autoclobber mode for those occasions when your transfer just
	keeps failing. "/autoclobber resume close" (the default) means that if
	the request is for a file larger than the one you have, the transfer
	will resume, otherwise the request will be rejected.

*** News 08/20/2003 -- You cannot do /TIMER -REPEAT -1 0
	Because this would busy loop.  You need *some* sort of interval, 
	even if it is very small.

*** News 08/20/2003 -- You can no longer do /WINDOW NUMBER on channel windows
	Windows have traditionally tracked their current channel by holding
	the current channel name as a string.  This has been a huge hassle
	since it's possible for the window to think its current channel is
	a channel you're not on, and there was no way to fix that short of
	doing brute force sanity checks.  Now EPIC tracks your current
	channels by having each channel hold a "priority" number, and the
	refnum of its window.  Whenever you remove a channel from its window
	by whatever reason, the channel that has the next highest priority
	is made the current channel.  This means EPIC can remember all of
	your previous current channels and unwind them sensibly.  But this
	all comes with a price.  Because channels track their windows by 
	refnum now, you can no longer change a window's refnum if it has 
	channels in it.  If you try, EPIC will refuse to comply.

*** News 08/15/2003 -- You can now /RETURN from a /LOADing script
	If you /RETURN from within a /LOADing script, the /LOAD will end.
	This can be useful if you want to protect against /LOADing a script
	twice, or if it's a pre-formatted script and you don't want it to 
	be /LOADed by the standard loader.

*** News 08/15/2003 -- Improvements to how EPIC handles words
	Up until this point, EPIC's word handling was more "ad hoc" than
	anything.  Some places honored double quoted words, other places did 
	not, and even then not every place did the same thing with double 
	quoted words.  In some places, words would include leading spaces, 
	and in others they would not.  Same thing with trailing spaces.  It 
	was just a total mess.  We made a concerted effort to clean up all of 
	this so that there is only one set of rules for all words in EPIC.  
	I would document the new set of rules, except I don't want to hold 
	up this release by writing a big old document.  Stay tuned.  Basically
	the point is everything should be sensible and consistent now.

*** News 08/15/2003 -- Improvements to EPIC's source code
	At or around this timeframe, EPIC's source code was audited and
	fixed so that no "unsafe" C functions are used.  This was used to 
	satisfy the pedants who worry that any use of an unsafe C function,
	even if it is carefully checked, is a security risk.  Also, EPIC
	was compiled with some of the stricter FreeBSD "WARNS" compiler
	flags, and many hundreds of changes were made to improve the 
	quality and conformance of EPIC's source code.

*** News 07/19/2003 -- New argument to /LASTLOG, /LASTLOG -TARGET
	Items are stored in your lastlog along with the "display target".
	If the message has anything to do with a channel, the target is
	that channel.  If it is a msg, notice, or dcc you sent, or someone
	sent to you, then the target is the other nick.  You can select
	only output pertaining to certain targets with /LASTLOG -TARGET.
	For example, to see only public messages to #epic,
		/LASTLOG -TARGET #epic -PUBLIC

*** News 07/14/2003 -- New /SET, /SET MAIL_INTERVAL
	Previously, the client checked your mbox at the top of every minute
	and whenever the status bar was redrawn.  For some people, this was
	far too often, and for others, it was not nearly often enough.  Now
	you can control exactly how often your mbox is checked with this set.
	Please remember that redrawing your status bar no longer rechecks
	your mail; what you see on your status bar is cached and recreated
	by a recurring timer that runs as often as this /set directs.  The
	default value is 60 (at the top of every minute).  When CPU_SAVER
	mode is active, /SET CPU_SAVER_EVERY overrides this value.

*** News 07/14/2003 -- New /SET, /SET CLOCK_INTERVAL
	Previously, the client updated the status bar clock (and $T inline
	expando, and /on timer, and /on idle) at the top of every minute.
	For some people, this was not nearly often enough.  Now you can
	control exactly how often the clock is updated with this set. 
	As an example, if you 
		/SET CLOCK_INTERVAL 1 			and 
		/SET CLOCK_FORMAT %H:%M:%S
	the status bar clock will show seconds and update every second!
	The default value is 60 (the top of every minute).  When CPU_SAVER
	mode is active, /SET CPU_SAVER_EVERY overrides this value.

*** News 07/04/2003 -- New interface to $dccctl()
	You may not get or set the "offered address" of a dcc offer by
	someone else.  Resetting the remote offered address may be 
	necessary if the remote peer's client mangled the handshake.

	$dccctl(GET <refnum> OFFERADDR)
	- Returns the address that the remote peer offered to make the 
	  dcc available at.  It will be a p-addr (ie, "127.0.0.1") and a 
	  port number.

	$dccctl(SET <refnum> OFFERADDR <address> <port>)
	- Sets the address that the remote peer offered to make the dcc
	  available at.  It may be either a p-addr (ie, "127.0.0.1") or a
	  hostname (ie, "remote.peer.icann.com"), and a port number.  The
	  empty string is returned if the connection is already open (it
	  doesn't make any sense to change it at that point), or if the 
	  address you provide doesn't make sense.  It returns 1 if the
	  change was successful.

*** News 07/04/2003 -- More interfaces to $ignorectl()
	You can now query and set the ignore's creation time, its 
	last-used time, and the number of times it's been used:

	$ignorectl(GET <refnum> CREATION)
	- Return the time the ignore was created.  The first integer is in
	  seconds and the second number is in milliseconds.  This is the 
	  same format that $utime() uses.

	$ignorectl(GET <refnum> LAST_USED)
	- Return the time the ignore was used (triggered).  The first integer 
	  is in seconds and the second number is in milliseconds.  This is 
	  the same format that $utime() uses.

	$ignorectl(GET <refnum> COUNTER)
	- Return the number of times the ignore has been used (triggered).

	$ignorectl(SET <refnum> CREATION <seconds> <milliseconds>)
	- Set the time the ignore was created.  The two values shall be
	  system clock time, that is, the number of seconds after the epoch
	  when the ignore was created.  Why you would want to change 
	  this is beyond me, but you know, whatever.  
	  The ignore's refnum is returned.

	$ignorectl(SET <refnum> LAST_USED <seconds> <milliseconds>)
	- Set the time the ignore was last used (triggered).  The two values 
	  shall be system clock time, that is, the number of seconds after 
	  the epoch when the ignore was last used (triggered).
	  The ignore's refnum is returned.

	$ignorectl(SET <refnum> COUNTER <number>)
	- Set the number of times the ignore has been used (triggered).
	  This is probably most useful to reset to 0 if you want to see
	  if an ignore is still being triggered or not.
	  The ignore's refnum is returned.

*** News 06/30/2003 -- Revamped /IGNORE support.
	The /IGNORE support for epic has been mostly rewritten, but the
	user-interface has tried to say the same.  Several new features
	have been added:

	1) Refnum support -- You can refer to an ignore by either its mask
	   or its refnum.  Output from /IGNORE includes the refnum.
	2) Timeout support -- You can set an amount of time an ignore should
	   be in force before it is automatically expired.  At the end of
	   the timeout, the ignore is removed and you are notified.
	3) Ignore reasons -- You can attach to each ignore a reason string
	   why you are ignoring the reason.  This can help you in case you
	   want to know when you set it or why the person is bothering you...

	Refnum support should be pretty easy to use -- wheerever you would
	normally give an ignore mask, you just use a refnum, for example:

	/ignore *!*really@long.address.com all
	*** Now ignoring ALL from *!*really@long.address.com (refnum 1)
	/ignore 1 none
	*** *!*really@long.address.com removed from ignorance list (ignore 
	+   refnum 1)

	/ignore *!*@foo.com all timeout 10
	*** Now ignoring ALL from *!*@foo.com (refnum 2)
	[ after 10 seconds pass ]
	*** *!*@foo.com removed from ignorance list (ignore refnum 2)

	/ignore *!*@booya.com all reason "getting on my nerves"
	*** Now ignoring ALL from *!*@booya.com (refnum 3) because getting 
	+   on my nerves

*** News 06/30/2003 -- New built in function, $ignorectl()
	This is a low-level interface to the ignore system

	$ignorectl(REFNUMS)
	- Return all integer refnums for all active ignores.

	$ignorectl(REFNUM <ignore-pattern>)
	- Given an exact ignore pattern, return that ignore's refnum.

	$ignorectl(ADD <ignore-pattern> [level-desc])
	- Add a new ignore, ala /IGNORE <ignore-pattern> <level-desc>
	  and return the refnum for the new ignore.  <ignore-pattern> is
	  taken literally and should not contain spaces or commas.

	$ignorectl(CHANGE <refnum> [level-desc])
	- Change the <refnum> ignore by adding or subtracting levels as
	  indicated by [level-desc].  If <refnum> is not a number or does
	  not represent a valid ignore, the empty string is returned.
	  Otherwise, <refnum> is returned.

	$ignorectl(DELETE <refnum>)
	- Remove the ignore numbered <refnum>

	$ignorectl(PATTERN <wildcard pattern>)
	- The effect of $igmask(<wildcard pattern>): treating each ignore
	  pattern as a literal string, return all refnums whose ignore masks
	  are matched by the <wildcard pattern>.

	$ignorectl(RPATTERN <nick!user@host>)
	- The effect of $rigmask(<nick!user@host>): treating the argument
	  as a nick!user@host string, return all refnums whose ignore masks
	  match the nick!user@host string, that is, each ignore which would
	  "cover" the nick!user@host.

	$ignorectl(WITH_TYPES [level-desc])
	- The effect of $rigtype([level-desc]): return the refnums of all
	  ignores which contain at least all of the levels indicated.  It
	  is possible for an ignore to have MORE levels set, but of those
	  levels which are requested, all of them must be present.

	If you attempt to get a value but <refnum> is not valid, the
	empty string is returned.

	$ignorectl(GET <refnum> NICK)
	- Return the ignore-pattern for the ignore refnum

	$ignorectl(GET <refnum> LEVELS)
	- Like $igtype(), but better: return a space separated list of 
	  all of the ignore levels that are active for this ignore, each
	  level prefixed with exactly one character which indicates that
	  level's disposition:
		/<level>	Suppressive ignore
		+<level>	Highlight ignore
		^<level>	Exceptive ignore

	$ignorectl(GET <refnum> SUPPRESS)
	- Return an integer value that contains a bitwise representation
	  of all of the suppressed levels for this ignore.  The exact layout
	  of this value is epic-version-dependant and may change in the
	  future.  If you use this value in a script, make sure you are
	  using a layout compatable with the version of epic the user is
	  using.

	$ignorectl(GET <refnum> EXCEPT)
	- Return an integer value that contains a bitwise representation
	  of all of the excepted levels for this ignore.  See above for
	  warning about trying to use this value.

	$ignorectl(GET <refnum> HIGHLIGHT)
	- Return an integer value that contains a bitwise representation
	  of all of the highlighted levels for this ignore.  See above for
	  warning about trying to use this value.

	$ignorectl(GET <refnum> EXPIRATION)
	- Return the time the ignore is to expire as two integers. The first
	  integer is the seconds and the second number is the milliseconds.
	  This is the same format that $utime() uses.  If the ignore does not
	  expire, both values are 0.

	$ignorectl(GET <refnum> REASON)
	- Return the reason the user set the ignore, if any.

	If you attempt to set a value but <refnum> is not valid, then
	the empty string is returned.

	$ignorectl(SET <refnum> NICK <ignore-pattern>)
	- Set the ignore-pattern for the ignore refnum.
	  *** WARNING *** The ignore list is usually sorted, and changing
	  this value may de-sort the ignore list.  The result of this is
	  uncertain and could destabilize epic.  It is probably not a good
	  idea to change an ignore's pattern.  
	  The ignore's refnum is returned.

	$ignorectl(SET <refnum> LEVELS <level-desc>)
	- Unconditionally set the ignore levels to <level-desc>.  All levels
	  previously in use are cleared and replaced with the new levels.
	  You should prefix each level with one character to indicate it's
	  disposition:
		/<level>	Suppressive ignore
		+<level>	Highlight ignore
		^<level>	Exceptive ignore
	  The ignore's refnum is returned.

	$ignorectl(SET <refnum> SUPPRESS <integer>)
	- Unconditionally set the integer value corresopnding to the 
	  suppressive ignores for this ignore item.  
	  *** WARNING *** The exact layout of this value is version 
	  dependant on epic and may change in the future, so changing this 
	  value directly like this could corrupt the ignore if you don't 
	  know what version of epic you are using.  You Have Been Warned.
	  The ignore's refnum is returned.

	$ignorectl(SET <refnum> EXCEPT <integer>)
	- Unconditionally set the integer value corresopnding to the 
	  exceptive ignores for this ignore item.  See above warning
	  The ignore's refnum is returned.

	$ignorectl(SET <refnum> HIGHLIGHT <integer>)
	- Unconditionally set the integer value corresopnding to the 
	  highlighted ignores for this ignore item.  See above warning
	  The ignore's refnum is returned.

	$ignorectl(SET <refnum> EXPIRATION <seconds> <milliseconds>)
	- Set the time an ignore shall expire.  The two values shall be
	  system clock time, that is, the number of seconds after the epoch
	  when the ignore shall be removed.  This is not the expiration 
	  interval (the number of seconds from now it should be removed) but
	  rather the absolute system clock time it should be removed.  You
	  can add the expiration interval to $utime() to get this value.
	  If both values are 0, the ignore will not expire.  
	  The ignore's refnum is returned.

	$ignorectl(SET <refnum> REASON [reason])
	- Set the reason the user set the ignore.  The return value is the
	  reason.  If no reason is given, the ignore's reason is removed.
	  The ignore's refnum is returned.

*** News 06/21/2003 -- New built in script, 'paste', /SET PASTE ON|OFF
	The 'paste' script implements three new sets and one keybinding:

	1) /SET PASTE (ON|OFF)
	2) /SET PASTE_STRIP (ON|OFF)
	3) /SET PASTE_DELAY <number>
	4) Binds key ^P to /SET PASTE TOGGLE

	When you /SET PASTE ON, everything you type at the input prompt is
	taken to be literal text that you're pasting and it is sent to your
	current target without any interpretation by epic.  This means you
	can paste things like C code with comments, or ircII code without
	EPIC interpreting your paste as commands.  When you /SET PASTE OFF,
	everything goes back to normal.  The default is OFF.

	Because it is theoretically possible for you to get stuck into
	paste mode, where you would be unable to /SET PASTE OFF, there are
	two ways out of "paste mode".  The ^P (control-P) key binding will
	toggle the paste mode, turning it off if it is on (and turning it 
	on if it is off...).  The "paste mode" feature also turns itself
	off after a short delay, which you can control with /SET PASTE_DELAY.
	The default paste delay is 30 seconds.

	Anguzhawk, who asked me for this script originally, also wanted to
	able to strip off leading whitespace on pre-formatted text that
	he was pasting.  If you /SET PASTE_STRIP ON, then epic will remove
	all leading whitespace from any text you paste.  If you 
	/SET PASTE_STRIP OFF, everything goes back to normal.  The default
	is OFF.
 
# End of file
