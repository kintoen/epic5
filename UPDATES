EPIC4-1.2.0

*** News 08/30/2003 -- New function $randomread() in the files script.
	It works much like the $randread() builtin, but it avoids certain
	potential bugs, and will return one line from each specified file.

*** News 08/30/2003 -- commandqueues script updates.
	q1cmd now permits you to specify multiple comma separated queues
	to test against for the specific purpose of blocking.  The command
	will only be queued on the first.

	qcmd now makes reference to a non-existant function called
	$islagged().  If this returns a true value, qcmd will stop right
	there so that the server doesn't get mistakenly flooded.

*** News 08/30/2003 -- Autoget script enhanced.
	A new autoclobber mode for those occasions when your transfer just
	keeps failing. "/autoclobber resume close" (the default) means that if
	the request is for a file larger than the one you have, the transfer
	will resume, otherwise the request will be rejected.

*** News 07/19/2003 -- New argument to /LASTLOG, /LASTLOG -TARGET
	Items are stored in your lastlog along with the "display target".
	If the message has anything to do with a channel, the target is
	that channel.  If it is a msg, notice, or dcc you sent, or someone
	sent to you, then the target is the other nick.  You can select
	only output pertaining to certain targets with /LASTLOG -TARGET.
	For example, to see only public messages to #epic,
		/LASTLOG -TARGET #epic -PUBLIC

*** News 07/14/2003 -- New /SET, /SET MAIL_INTERVAL
	Previously, the client checked your mbox at the top of every minute
	and whenever the status bar was redrawn.  For some people, this was
	far too often, and for others, it was not nearly often enough.  Now
	you can control exactly how often your mbox is checked with this set.
	Please remember that redrawing your status bar no longer rechecks
	your mail; what you see on your status bar is cached and recreated
	by a recurring timer that runs as often as this /set directs.  The
	default value is 60 (at the top of every minute).  When CPU_SAVER
	mode is active, /SET CPU_SAVER_EVERY overrides this value.

*** News 07/14/2003 -- New /SET, /SET CLOCK_INTERVAL
	Previously, the client updated the status bar clock (and $T inline
	expando, and /on timer, and /on idle) at the top of every minute.
	For some people, this was not nearly often enough.  Now you can
	control exactly how often the clock is updated with this set. 
	As an example, if you 
		/SET CLOCK_INTERVAL 1 			and 
		/SET CLOCK_FORMAT %H:%M:%S
	the status bar clock will show seconds and update every second!
	The default value is 60 (the top of every minute).  When CPU_SAVER
	mode is active, /SET CPU_SAVER_EVERY overrides this value.

*** News 07/04/2003 -- New interface to $dccctl()
	You may not get or set the "offered address" of a dcc offer by
	someone else.  Resetting the remote offered address may be 
	necessary if the remote peer's client mangled the handshake.

	$dccctl(GET <refnum> OFFERADDR)
	- Returns the address that the remote peer offered to make the 
	  dcc available at.  It will be a p-addr (ie, "127.0.0.1") and a 
	  port number.

	$dccctl(SET <refnum> OFFERADDR <address> <port>)
	- Sets the address that the remote peer offered to make the dcc
	  available at.  It may be either a p-addr (ie, "127.0.0.1") or a
	  hostname (ie, "remote.peer.icann.com"), and a port number.  The
	  empty string is returned if the connection is already open (it
	  doesn't make any sense to change it at that point), or if the 
	  address you provide doesn't make sense.  It returns 1 if the
	  change was successful.

*** News 07/04/2003 -- More interfaces to $ignorectl()
	You can now query and set the ignore's creation time, its 
	last-used time, and the number of times it's been used:

	$ignorectl(GET <refnum> CREATION)
	- Return the time the ignore was created.  The first integer is in
	  seconds and the second number is in milliseconds.  This is the 
	  same format that $utime() uses.

	$ignorectl(GET <refnum> LAST_USED)
	- Return the time the ignore was used (triggered).  The first integer 
	  is in seconds and the second number is in milliseconds.  This is 
	  the same format that $utime() uses.

	$ignorectl(GET <refnum> COUNTER)
	- Return the number of times the ignore has been used (triggered).

	$ignorectl(SET <refnum> CREATION <seconds> <milliseconds>)
	- Set the time the ignore was created.  The two values shall be
	  system clock time, that is, the number of seconds after the epoch
	  when the ignore was created.  Why you would want to change 
	  this is beyond me, but you know, whatever.  
	  The ignore's refnum is returned.

	$ignorectl(SET <refnum> LAST_USED <seconds> <milliseconds>)
	- Set the time the ignore was last used (triggered).  The two values 
	  shall be system clock time, that is, the number of seconds after 
	  the epoch when the ignore was last used (triggered).
	  The ignore's refnum is returned.

	$ignorectl(SET <refnum> COUNTER <number>)
	- Set the number of times the ignore has been used (triggered).
	  This is probably most useful to reset to 0 if you want to see
	  if an ignore is still being triggered or not.
	  The ignore's refnum is returned.

*** News 06/30/2003 -- Revamped /IGNORE support.
	The /IGNORE support for epic has been mostly rewritten, but the
	user-interface has tried to say the same.  Several new features
	have been added:

	1) Refnum support -- You can refer to an ignore by either its mask
	   or its refnum.  Output from /IGNORE includes the refnum.
	2) Timeout support -- You can set an amount of time an ignore should
	   be in force before it is automatically expired.  At the end of
	   the timeout, the ignore is removed and you are notified.
	3) Ignore reasons -- You can attach to each ignore a reason string
	   why you are ignoring the reason.  This can help you in case you
	   want to know when you set it or why the person is bothering you...

	Refnum support should be pretty easy to use -- wheerever you would
	normally give an ignore mask, you just use a refnum, for example:

	/ignore *!*really@long.address.com all
	*** Now ignoring ALL from *!*really@long.address.com (refnum 1)
	/ignore 1 none
	*** *!*really@long.address.com removed from ignorance list (ignore 
	+   refnum 1)

	/ignore *!*@foo.com all timeout 10
	*** Now ignoring ALL from *!*@foo.com (refnum 2)
	[ after 10 seconds pass ]
	*** *!*@foo.com removed from ignorance list (ignore refnum 2)

	/ignore *!*@booya.com all reason "getting on my nerves"
	*** Now ignoring ALL from *!*@booya.com (refnum 3) because getting 
	+   on my nerves

*** News 06/30/2003 -- New built in function, $ignorectl()
	This is a low-level interface to the ignore system

	$ignorectl(REFNUMS)
	- Return all integer refnums for all active ignores.

	$ignorectl(REFNUM <ignore-pattern>)
	- Given an exact ignore pattern, return that ignore's refnum.

	$ignorectl(ADD <ignore-pattern> [level-desc])
	- Add a new ignore, ala /IGNORE <ignore-pattern> <level-desc>
	  and return the refnum for the new ignore.  <ignore-pattern> is
	  taken literally and should not contain spaces or commas.

	$ignorectl(CHANGE <refnum> [level-desc])
	- Change the <refnum> ignore by adding or subtracting levels as
	  indicated by [level-desc].  If <refnum> is not a number or does
	  not represent a valid ignore, the empty string is returned.
	  Otherwise, <refnum> is returned.

	$ignorectl(DELETE <refnum>)
	- Remove the ignore numbered <refnum>

	$ignorectl(PATTERN <wildcard pattern>)
	- The effect of $igmask(<wildcard pattern>): treating each ignore
	  pattern as a literal string, return all refnums whose ignore masks
	  are matched by the <wildcard pattern>.

	$ignorectl(RPATTERN <nick!user@host>)
	- The effect of $rigmask(<nick!user@host>): treating the argument
	  as a nick!user@host string, return all refnums whose ignore masks
	  match the nick!user@host string, that is, each ignore which would
	  "cover" the nick!user@host.

	$ignorectl(WITH_TYPES [level-desc])
	- The effect of $rigtype([level-desc]): return the refnums of all
	  ignores which contain at least all of the levels indicated.  It
	  is possible for an ignore to have MORE levels set, but of those
	  levels which are requested, all of them must be present.

	If you attempt to get a value but <refnum> is not valid, the
	empty string is returned.

	$ignorectl(GET <refnum> NICK)
	- Return the ignore-pattern for the ignore refnum

	$ignorectl(GET <refnum> LEVELS)
	- Like $igtype(), but better: return a space separated list of 
	  all of the ignore levels that are active for this ignore, each
	  level prefixed with exactly one character which indicates that
	  level's disposition:
		/<level>	Suppressive ignore
		+<level>	Highlight ignore
		^<level>	Exceptive ignore

	$ignorectl(GET <refnum> SUPPRESS)
	- Return an integer value that contains a bitwise representation
	  of all of the suppressed levels for this ignore.  The exact layout
	  of this value is epic-version-dependant and may change in the
	  future.  If you use this value in a script, make sure you are
	  using a layout compatable with the version of epic the user is
	  using.

	$ignorectl(GET <refnum> EXCEPT)
	- Return an integer value that contains a bitwise representation
	  of all of the excepted levels for this ignore.  See above for
	  warning about trying to use this value.

	$ignorectl(GET <refnum> HIGHLIGHT)
	- Return an integer value that contains a bitwise representation
	  of all of the highlighted levels for this ignore.  See above for
	  warning about trying to use this value.

	$ignorectl(GET <refnum> EXPIRATION)
	- Return the time the ignore is to expire as two integers. The first
	  integer is the seconds and the second number is the milliseconds.
	  This is the same format that $utime() uses.  If the ignore does not
	  expire, both values are 0.

	$ignorectl(GET <refnum> REASON)
	- Return the reason the user set the ignore, if any.

	If you attempt to set a value but <refnum> is not valid, then
	the empty string is returned.

	$ignorectl(SET <refnum> NICK <ignore-pattern>)
	- Set the ignore-pattern for the ignore refnum.
	  *** WARNING *** The ignore list is usually sorted, and changing
	  this value may de-sort the ignore list.  The result of this is
	  uncertain and could destabilize epic.  It is probably not a good
	  idea to change an ignore's pattern.  
	  The ignore's refnum is returned.

	$ignorectl(SET <refnum> LEVELS <level-desc>)
	- Unconditionally set the ignore levels to <level-desc>.  All levels
	  previously in use are cleared and replaced with the new levels.
	  You should prefix each level with one character to indicate it's
	  disposition:
		/<level>	Suppressive ignore
		+<level>	Highlight ignore
		^<level>	Exceptive ignore
	  The ignore's refnum is returned.

	$ignorectl(SET <refnum> SUPPRESS <integer>)
	- Unconditionally set the integer value corresopnding to the 
	  suppressive ignores for this ignore item.  
	  *** WARNING *** The exact layout of this value is version 
	  dependant on epic and may change in the future, so changing this 
	  value directly like this could corrupt the ignore if you don't 
	  know what version of epic you are using.  You Have Been Warned.
	  The ignore's refnum is returned.

	$ignorectl(SET <refnum> EXCEPT <integer>)
	- Unconditionally set the integer value corresopnding to the 
	  exceptive ignores for this ignore item.  See above warning
	  The ignore's refnum is returned.

	$ignorectl(SET <refnum> HIGHLIGHT <integer>)
	- Unconditionally set the integer value corresopnding to the 
	  highlighted ignores for this ignore item.  See above warning
	  The ignore's refnum is returned.

	$ignorectl(SET <refnum> EXPIRATION <seconds> <milliseconds>)
	- Set the time an ignore shall expire.  The two values shall be
	  system clock time, that is, the number of seconds after the epoch
	  when the ignore shall be removed.  This is not the expiration 
	  interval (the number of seconds from now it should be removed) but
	  rather the absolute system clock time it should be removed.  You
	  can add the expiration interval to $utime() to get this value.
	  If both values are 0, the ignore will not expire.  
	  The ignore's refnum is returned.

	$ignorectl(SET <refnum> REASON [reason])
	- Set the reason the user set the ignore.  The return value is the
	  reason.  If no reason is given, the ignore's reason is removed.
	  The ignore's refnum is returned.

*** News 06/21/2003 -- New built in script, 'paste', /SET PASTE ON|OFF
	The 'paste' script implements three new sets and one keybinding:

	1) /SET PASTE (ON|OFF)
	2) /SET PASTE_STRIP (ON|OFF)
	3) /SET PASTE_DELAY <number>
	4) Binds key ^P to /SET PASTE TOGGLE

	When you /SET PASTE ON, everything you type at the input prompt is
	taken to be literal text that you're pasting and it is sent to your
	current target without any interpretation by epic.  This means you
	can paste things like C code with comments, or ircII code without
	EPIC interpreting your paste as commands.  When you /SET PASTE OFF,
	everything goes back to normal.  The default is OFF.

	Because it is theoretically possible for you to get stuck into
	paste mode, where you would be unable to /SET PASTE OFF, there are
	two ways out of "paste mode".  The ^P (control-P) key binding will
	toggle the paste mode, turning it off if it is on (and turning it 
	on if it is off...).  The "paste mode" feature also turns itself
	off after a short delay, which you can control with /SET PASTE_DELAY.
	The default paste delay is 30 seconds.

	Anguzhawk, who asked me for this script originally, also wanted to
	able to strip off leading whitespace on pre-formatted text that
	he was pasting.  If you /SET PASTE_STRIP ON, then epic will remove
	all leading whitespace from any text you paste.  If you 
	/SET PASTE_STRIP OFF, everything goes back to normal.  The default
	is OFF.
 
# End of file
