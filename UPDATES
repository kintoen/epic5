EPIC4-1.2.0

*** News 12/19/2001 -- New /SET, /SET ALLOW_C1_CHARS (defaults to OFF)
	The ascii characters 128 to 159 on many terminal emulators
	(especially GNU Screen and XTerm) have special control meanings
	which can be disasterous for users.  EPIC has traditionally allowed
	you to output characters in this range without question.  However,
	due to many requests, a /SET has been added.  Characters in this
	range will be stripped out if this /SET is off.  Otherwise, the
	traditional behavior will be retained.  This is a deviation from 
	traditional practice, but it is an important deviation, as it will
	protect most users from rogue users.

*** News 12/19/2001 -- ROM_CHAR functionality removed
	A little known feature of EPIC, the ^R attribute, could be followed
	by three ascii digits, and the decimal number following the ^R
	attribute would be inserted into the output at that point.  It was
	vulnerable to exploitation by outside attackers, and is very 
	difficult to secure against exploitation.  For this reason, the
	feature has been removed until we can figure out how to properly
	implement it.  If you used this feature, I apologize, but it is for
	the greater good that we must remove this feature for now.

*** News 11/14/2001 -- Support for ~/.epicrc file
	LET ME JUST START BY SAYING THIS IS NOT MODELED AFTER BX.
	Some of you use both epic and ircII and you would like to be
	able to keep separate .ircrc files and .epicrc files.  Now you
	can do that.  If you have a ~/.epicrc file, then epic will load
	that and WILL NOT LOAD your ~/.ircrc.  If you do not have a
	~/.epicrc file, then epic will load your ~/.ircrc as it always
	has.  The EPICRC environment variable is accepted; it behaves
	in the same way as the IRCRC environment variable.

*** News 11/14/2001 -- Color support has changed somewhat
	Before this date, color handling was done by reacting to each
	attribute change.  For example, a ^B either turned bold on, or
	it turned it off.  But EPIC didn't keep track of ther attributes,
	and on some systems, turning bold off turned reverse and color off.
	Also, turning on color turned off reverse and bold.  Many scripts 
	have come to kludge around this by "assuming" that turning certain 
	things on (like color) or off (like bold) had side effects on other
	attributes.  This was never intentional and it is certainly confusing.
	On this date, a new attribute parser was introduced that does not
	impose *any side effects whatsoever* on attribute changes.  If you
	change colors, it will NOT turn off bold or reverse.  If you turn off
	bold it will NOT turn off colors or underline.  If you turn on bold,
	it will NOT turn off colors.  Each attribute (bold, underline,
	reverse, flash, color) are handled independantly and separately.
	Each time you turn an attribute on or off, only that attribute is
	affected.  The sum result of what you see on the screen is then
	the cumulative effect of all the attributes which are on.  This
	means if you turn bold on and then turn on color, you will get 
	bold color.  If you turn on reverse and turn on color, you will 
	get reversed colors.  If you turn on reverse, turn on color, then
	turn off color, you will still have reverse!  Hopefully this will
	make everything much more sane and clean.

*** News 11/13/2001 -- Resizable wserv support (wserv4)
	I backported the implementation of wserv4 from EPIC5.  The main
	features of wserv4 are that it uses two channels of communication
	to talk to epic, and it can support independant resizing of each
	screen.  Until now, all of your /window create screens had to be 
	exactly the same size as your main screen or they wouldn't work.  
	That restriction has now been removed.  All of your screens can be
	of whatever size you wish and you can resize them at will.

*** News 11/13/2001 -- /FLUSH now uses the "redirect sink"
	Until now, /FLUSH worked by actually throwing away all data from
	the server until there was a 1 second pause.  Since none of this
	data was processed, if things like JOINs or QUITs or KICKs were
	thrown away, the client could become terribly confused and possibly
	even crash.  This has changed: now the /flush command does not
	throw away all input from the server, but instead just suppresses
	all output for the current server command.  This means that all of
	your /on's will still be processed, but you won't have to see the
	output (if you were doing a /who ** or a /links for exmaple).
	Bottom line: it is now safe to do /flush again!

*** News 11/13/2001 -- The "redirect sink" -- target 0, and practice uses
	You may now do /REDIRECT 0 to suppress all output from a server
	command.  Target 0 is called the "redirect sink" and any output
	that is redirected to it will NOT be displayed.  This technique
	is very useful for trapping only a few /on's for a complex query
	(such as /whois) and not having to worry about extra/unknown 
	numerics cluttering up the user's screen.  Consider this:

			on ^318 * { @count++ }
			redirect 0 whois hop

	Normally, if you were to do "whois hop", you would see all the other
	numerics, which would be ugly if you're trying to catch the whois
	replies with /on's.  This is especially true for networks which use
	extra numerics in their whois replies that your script may not know
	about.  So if you just /redirect 0 your server queries, then any
	/on's that you don't catch that would otherwise send output to the
	user's screen will redirect their output to the "sink", ie, it will
	not be displayed.  This should make it much easier to script whois
	replies.

*** News 11/12/2001 -- Changes to /SETENV let you unset environment variables
	You may now unset environment variables with the /SETENV command by
	prefixing the environment variable name with a single hyphen and by
	omitting the second argument, like so:
		/SETENV -IRCSERVER
	You can still set an environment variable that starts with a hyphen:
		/SETENV -FOO one two three
	You can unset an environment variable that starts with a hyphen:
		/SETENV --FOO
	You can set an environment variable with no value:
		/SETENV EMPTYVAR
	but you can't set an empty environment variable that starts with
	a hyphen (sorry).  If anyone ever finds that they actually need to
	be able to do this, let me know and we'll work something out.

*** News 11/12/2001 -- New built in functions for file manipulations
	Several new functions have been added to help you manipulate files
	that are opened with $open().

	$fskip(<fd>)
	   This function reads the next line of the file and discards it.
	   It returns the end-of-file condition of the file after the read.
	   If <fd> is not a valid file, -1 is returned.

	$fseek(<fd> <numbytes> <whence>)
	   This function changes the file position indicator.  The file
	   position indicator is moved <numbytes> (a 31 bit signed number)
	   away from <whence>, which is a symbolic anchor with the following
	   possible values:
		SET	Move <numbytes> from the beginning of the file
		CUR	Move <numbytes> forward or backward from the
			current file position indicator
		END	Move <numbytes> forward or backward from the
			end of the file.
	   <numbytes> can't be greater than 2GB, and this is a limitation
	   in the fseek(3) interface, so don't complain to me about it.
	   If a seek error occurs, -1 is returned and $error(<fd>) will
	   return 1.  If <fd> Is not a valid file, -1 is returned.

	$frewind(<fd>)
	   This function sets the file position indicator to the beginning
	   of the file.  It is the same as $seek(<fd> 0 SET).  If <fd> is
	   not a valid file, -1 is returned.

	$ferror(<fd>)
	   This function returns the file error indicator, either 0 or 1.  
	   This is set whenever any error occurs and can be cleared by 
           resetting the file position indicator.  If <fd> is not a valid
	   file, -1 is returned.

	$isfilevalid(<fd>)
	   This function returns 1 if <fd> is a valid value previously 
	   returned by $open() and returns 0 otherwise.

