EPIC5-0.1

*** News 07/08/2004 -- Changes to /ison and notify.
	The back end of the notify system and the /ison command has been
	changed to permit only a certain number of ISONs to be sent to a server
	at one time.  The benefit of this is that it will typically prevent a
	large notify list flooding the client off the server.

	The down side is that it will cause scripts like $is_on() in script/guh
	that use "/wait for ison .." to fail until they have been fixed.  The
	fix is to put "@ serverctl(set $servernum() maxison 0)" at the top of
	any alias that uses it.  This will turn the new behaviour off.

	The notify system itself will not queue an ISON to be sent if there are
	any ISONs waiting to be sent, but the /ison command will.

	One final note is that the "waiting to be sent" queue won't be flushed
	when the client reconnects to the server or when "/ison -f" is run.
	This won't cause any particular damage, but it's not nice and will
	probably change soon.

*** News 07/08/2004 -- Userhost updating in NICK changes.
	This is relevant to those who use the $serverctl() maxcache feature,
	which, if in effect, will prevent a /who message being sent to a
	server, and thereby make $userhost() fail for every nick that joined
	the channel before the client did.

	This patch will grab the userhost information for these users from the
	NICK message itself, and help to rebuild the $userhost() database
	faster.  It also makes it possible to manually get it into the database
	by /pretend'ing a NICK message with a userhost obtained from other
	sources such as the /userhost command.

*** News 03/19/2004 -- New built in function, $tobase(<base> <num>) [howl]
	This function converts <num>, a number in base 10, to base <base>.
	For example, $tobase(16 65536) returns "10000"

*** News 03/19/2004 -- New built in function, $strtol(<base> <num>) [howl]
	This function converts <num>, a number in base <base> to base 10.
	For example, $strtol(16 10000) returns "65536"

*** News 03/19/2004 -- Changes to /WINDOW NOTIFY, /WINDOW NOTIFIED
	These two /WINDOW operations now take ON, OFF, or TOGGLE arguments,
	instead of taking no arguments and behaving as toggle switches.
	If you do not provide an argument, they show you their current
	values as the other /WINDOW boolean values do.

*** News 03/19/2004 -- Addition and changes to $windowctl()
	$windowctl(GET <refnum> MISCFLAGS) always returns 0, and
	$windowctl(GET <refnum> NOTIFY) returns 1 if /window notify is on
	$windowctl(GET <refnum> NOTIFIED) returns 1 if /window notified is on.
	NOTIFY and NOTIFIED replace MISCFLAGS.

*** News 03/19/2004 -- New key binding, SWITCH_QUERY
	Whenever a window has multple nicknames in its nickname list,
	and one of those nicknames is active as the window's query, it
	is possible to use this binding to switch between all of the 
	nicks in the nick list, just in the same way you can switch
	between channels using SWITCH_CHANNELS.  If the window does not
	have an active query, this key binding will have no effect, even
	if the window has nicks in its nicklist!

*** News 03/19/2004 -- Unification of /WINDOW QUERY and /WINDOW ADD
	Historically, when you /WINDOW QUERY (or just /QUERY) <NICK>, then
	it would add <NICK> to the window's "NICK LIST".  The "NICK LIST" 
	is a list of nicknames for which output goes to that window, just
	like output to channels go to windows.  Output to or from a nick
	that is not on any window's "nick list" goes to the LEVEL_MSG level.
	When you used /WINDOW QUERY <NICK2> to change the query, it would
	remove the old query from the nick list, and messages to and from
	the original query went back to LEVEL_MSG.

	Well, this has been unified somewhat.  Now the following rules apply:
	1) When you /WINDOW QUERY <NICK>, then <NICK> is added to the 
	   window's nick list.
	2) If the window already has a query, then the old query nickname
	   is NO LONGER REMOVED from the window's nick list.  Output to 
	   that nick will continue to go to the window as it had before.
	3) When you use /WINDOW QUERY to cancel a query, then the current
	   query IS STILL REMOVED from the window's nick list, and output
	   to or from that nick will go to LEVEL_MSGS.

	It is no longer possible to have a window query that is not on the
	window's nicklist, because the query is selected from the members of
	the window's nicklist, rather than being a separate thing.

*** News 03/17/2004 -- Change to how /SET INDENT behaves
	Historically, if you have /SET INDENT ON, and the first word of the
	first line of output is wider than 1/3 of your screen, then the
	second (and subsequent) line(s) of output are NOT INDENTED.  This 
	has been changed so subsequent lines are indented 1/3 of the window's
	width.  To understand this change, think about how /set indent usually
	works, and if it would indent more than 1/3 of your screen, then it 
	will indent 1/3 instead of not at all.

*** News 03/17/2004 -- New flag to /XECHO , /XECHO -F
	If you use the /XECHO -F flag, "hidden window output notification"
	will not occur for any hidden windows that receive the output. 
	
*** News 03/16/2004 -- You can now bind the 255 character (ÿ)
	There has been a problem with the new key binding system that
	made it difficult for Russian language speakers to bind the 255
	character which is in their alphabet.  This should be fixed now.

*** News 03/16/2004 -- Can now join channels simultaneously per window
	Previously, if you attempted to join multiple channels in the same
	window simultaneously, you were not assured that all of the channels
	would go to that window.  Now you can be assured of this.  This should
	make reconnection/rejoin scripts much more sane.

*** News 03/16/2004 -- New built in function, $startupfile()
	This expands to the file that the client loaded at startup as your
	"startup file".  Usually this is ~/.ircrc or ~/.epicrc or whatever
	you specified as the IRCRC environment variable or the argument to
	-l or -L on the command line.

*** News 03/16/2004 -- Unknown CTCP requests offered via /ON CTCP_REQUEST
	It was pointed out that unknown/unhandled CTCP requests were only
	being hooked through /on ctcp, so it wasn't possible to use 
	/on ctcp_request to handle EVERY request.  Well, now unhandled CTCPs
	are hooked through both /on's just like handled CTCPs are.

*** News 03/16/2004 -- Semantic changes to $connect()
	You used to be able to depend on /ON DCC_RAW "% % E %" or 
	/ON DCC_RAW "% % C" hooking before $connect() returned.  Now that
	$connect() is nonblocking, YOU CAN NO LONGER DEPEND ON THIS.  You
	must set up your script to assume that /ON DCC_RAW will be hooked
	asynchronously, after at least the next sequence point.  Think of 
	it as being like not being able to depend on /WHOIS returning the
	numerics.  I'll probably add a way to /wait for a connection in the
	future.  Stay tuned.

*** News 03/16/2004 -- DCC connections are now nonblocking
	All connect()ions for DCC, including /DCC GET, /DCC CHAT, /DCC RESUME
	and $connect() are all fully nonblocking.  This means all connects
	in EPIC are now fully nonblocking! HUZZAH!

*** News 03/15/2004 -- /HELP command now handled by script
	The built in /HELP command has been replaced by a script that
	was written by howl for our use.  Much thanks to him!

*** News 03/14/2004 -- Six new USER lastlog levels
	You may now use USER5, USER6, USER7, USER8, USER9, and USER10
	as levels with your window, lastlog, flood, and ignore.  Just 
	use /xecho -l USER5 for example to send to your USER5 window.

*** News 01/20/2004 -- kqueue() support
	You can uncomment #define USE_FREEBSD_KQUEUE in newio.h if you
	want to play around with this experimental feature.

*** News 01/15/2004 -- /WINDOW DISCON and /WINDOW NOSERV now the same
	There was a subtle semantic difference between /WINDOW DISCON 
	and /WINDOW NOSERV that had to do with the window's "last server"
	that was used for reconnects.  Because the client no longer does
	reconnections, this difference is moot.  These two commands now 
	always do the same thing, which is to disassociate the window
	with any server.  The window becomes "server-less".

*** News 01/15/2004 -- Changes to /SERVER command
	/SERVER
	     Show the server list.
	/SERVER -DELETE <refnum|desc>
	     Remove server <refnum> (or <desc>) from server list.
	     Fails if you do not give it a refnum or desc.
	     Fails if server does not exist.
	     Fails if server is open.
	/SERVER -ADD <desc>
	     Add server <desc> to server list.
	     Fails if you do not give it a <desc>
	/SERVER +<refnum|desc>
	     If the server's state is "CLOSED", change it to "RECONNECT".  
	     This allows the server to reconnect if windows are pointed to it.
	     Note: server reconnection is asynchronous
	/SERVER -<refnum|desc>
	     Unconditionally close a server connection
	     Note: server disconnection is synchronous!
	/SERVER +
	     Switch windows from current server to next server in same group
	/SERVER -
	     Switch windows from current server to previous server in same group
	/SERVER <refnum|desc>
	     Switch windows from current server to another server.

*** News 01/08/2004 -- /ON WIDELIST went away here
	This /ON hasn't been hooked in many a year, and here it officially
	passed into the void.

*** News 01/07/2004 -- Removal of WINDOW BIND feature
	As part of the larger project to decouple windows from channels,
	the "window bind" feature has been removed.  This means you can 
	no longer /WINDOW BIND, /WINDOW REBIND, /WINDOW UNBIND, and you 
	cannot use $windowctl(* BIND_CHANNEL *) or $winbound().  It is 
	expected that eventually scripts will take over the job of routing 
	channels to the appropriate windows and EPIC will stay entirely 
	out of the way.

*** News 01/07/2004 -- New /ON, /ON SERVER_STATUS
	This /ON is thrown every time a server changes its "state".
	The states are listed below in "Server States" and I won't
	go into that again here.
		$0 - The server changing state
		$1 - The old status (a string, not a number)
		$2 - The new status
	If you find that you do something particularly onerous in 
	this /ON and EPIC panics or crashes, try /DEFERing it, and
	if that doesn't work either, let me know.

*** News 01/07/2004 -- Removal of NOTE support
	I doubt anyone will notice this, and if you do, bummer.

*** News 01/07/2004 -- Server states
	Servers now exist in one of several "states" each time it connects
	to the server.  It moves through each of the states from start to
	end, and stays at the end until manually reset by the user (or script)

	RECONNECT	As soon as a window is attached to the server, the 
			server should be connected to.
	CONNECTING	A connection to the server is in progress.  The server 
			is not ready to be used.
	REGISTERING	We are attempting protocol registration (NICK/USER) 
			with the server.  The server is open, but we cannot 
			really use it yet.
	SYNCING		Our registration has been accepted and we're doing 
			whatever meta-tasks are needed to get the connection 
			fully active
	ACTIVE		The connection is fully ready for all use.
	EOF		An End Of File (EOF) has been detected from the server.
			The connection was closed by the server and cannot be 
			used any longer.
	CLOSING		The connection to the server is being shut down.  If 
			the previous state was "ACTIVE" then you can still 
			send something to the server.  If the previous state
			was "EOF" then it's too late.  You cannot stop the
			closing of a server.
	CLOSED		The server is disconnected and cannot be used.  The
			server (and any windows connected to this server) stay
			in this state until the user resets the state to 
			RECONNECT.

*** News 01/07/2004 -- Channels are not tracked across disconnects
	When you are disconnected from a server for *any* reason, EPIC
	will not retain knowledge of the channels for the next connection
	and will not rejoin them.  It is expected that scripts will use
	this to their advantage to fully control the semantics you will
	have governing "auto-rejoin-on-reconnect".

*** News 01/07/2004 -- Server connections are now brought up asynchronously
	When you do /WINDOW SERVER or /SERVER or otherwise change the
	server of a window, the server is not immediately connected or
	disconnected, and the change will not take effect until the
	next time through the event looper.  This means that all server
	connections are "asychronous" (they don't interrupt the current
	flow of the script).  This means you most definitely cannot
	do /WINDOW SERVER <host> CHANNEL <channel> any more.  So please
	stop doing that. ;-)  Use /ON SERVER_STATUS to join channels.

*** News 01/07/2004 -- /XDEBUG SERVER_CONNECT a lot more interesting
	If you want to watch epic work its gory nonblocking connects,
	you can turn on this /xdebug and see everything in its glory.

*** News 01/07/2004 -- Nonblocking server connects
	EPIC now does all server connections using asynchronous, 
	nonrecursive, nonblocking connections.  And yes, it still 
	supports multiple protocols and multiple addresses (ie, 
	"us.undernet.org"), and *yes*, it will try another address if 
	a server refuses us registration ("You do not have access to 
	this server").

*** News 01/07/2004 -- EPIC no longer tracks server "dialect" per se
	The $version() string now always returns "2.8" since all 
	servers are nominally 2.8 class (rfc1459) servers, and epic
	does not attempt to determine if it's an undernet, ircnet,
	efnet, or dalnet server, etc.  This is mostly because scripts
	can hook /on 004 if they care, and the 005 numeric (ISUPPORT)
	is making dependance on the server's version much less important.

*** News 01/07/2004 -- EPIC loads ~/.ircrc (or ~/.epicrc) on 001 now
	Traditionally, ircII has loaded your ircrc when it received 
	the 002 numeric, and traditionally, epic has done it when it
	received the 004 numeric.  Due to some refactoring in epic,
	it is now possible for epic to load your ircrc when it receives
	the 001 numeric *and before it hooks /on 001*  This means you 
	shouldn't have to suffer the default epic output for any of
	the numerics from the server.

*** News 01/07/2004 -- Usermodes now tracked as strings instead of bits
	Before this change, ircII clients had always tracked your user
	and channel modes as bits, and the valid (supported) modes were
	hardcoded into the client at compile time.  With this change, 
	EPIC will no longer track your modes using bits, but instead 
	using strings.  This means that epic won't need source code
	changes to support new modes from your server.  You can't do
	$serverctl(SET|GET <refnum> UMODES) any more (but the old
	"UMODE" still works)

*** News 01/07/2004 -- /ON wildcard patterns now compiled into regexes
	At or around this date, EPIC started converting wildcard patterns
	used by /ON into extended POSIX regexes and compiling them, and
	using the regexes instead of the pattern matcher.  In the future,
	epic will allow you to specify your own regexes.  "Flexible"
	/on hooks are still wildcard pattern matched (for now) because
	recompiling the pattern every time the /on is thrown is senseless.

*** News -- 12/16/2003 -- New levels, KICK, QUIT, and MODE
	So just for a canonical list, here are all of the levels supported
	by flood, ignore, lastlog, and windows:
		CRAP	PUBLIC	MSG	NOTICE	WALL	WALLOP
		NOTE	OPNOTE	SNOTE	ACTION	DCC	CTCP
		INVITE	JOIN	NICK	TOPIC	PART	QUIT
		KICK	MODE	USER1	USER2	USER3	USER4
		ALL (special)	NONE (special)	HELP (special)

*** News -- 12/16/2003 -- Unification of ignore, flood, and lastlog levels
	Previously, the ignore, flood, and lastlog levels used the same
	names, but they had different meanings in each subsystem (ie, CRAP 
	in flood was different from CRAP in ignore, and CRAP in lastlog).
	Now all three subsystems use the same levels, all named the same,
	and (more or less) all defined the same.  There are some holes in
	this conversion cause I didn't check every possible combination.
	Report any odd behavior to me so I can fix it.

*** News -- 12/16/2003 -- New noise type for /ON, /ON %TYPE
	The /ON %TYPE modifier acts just like /ON ^TYPE, because it
	suppresses the default action, but it is unlike /ON ^TYPE
	because it does not turn off the display (what /ON ^TYPE
	does is it prefixes all the commands in the ON body with 
	the ^ modifier, which turns off output for that command.)
	This new modifer does not prefix each command with ^, so any
	commands not so prefixed will generate their normal output.	
	The idea is you can use this for /on set's
		/ON %SET "HOLD_MODE *" {WINDOW HOLD_MODE $*}

*** News -- 12/16/2003 -- Removed /SET BEEP_WHEN_AWAY
	This feature can be re-implemented in one line of script:
		/ON #MSG 617 * {IF (A) {BEEP}}

*** News -- 12/16/2003 -- Removed /SET BEEP_ON_MSG
	The /SET BEEP_ON_MSG feature has been removed because it was only
	half-implemented, and even that half didn't work right.  Keep an
	eye out for a scripted re-implementation of this in the future.

*** News -- 12/16/2003 -- Runtime auto-append-of-$* removed
	Historically, the ircII language has allowed you to auto-append
	$* onto the end of an alias at runtime by creating an alias that
	does not refer to any of the command line arguments.  For example,
		/alias m msg
	behaves at runtime as
		/alias m msg $*
	but with a performance penalty.  This behavior has now been removed
	and if you wish to have $* appended to your aliases, you need to 
	change them.  This change would be backwards compatable with epic4.

# End of file
