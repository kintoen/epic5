EPIC4-1.2.0

*** News 11/13/2001 -- Resizable wserv support (wserv4)
	I backported the implementation of wserv4 from EPIC5.  The main
	features of wserv4 are that it uses two channels of communication
	to talk to epic, and it can support independant resizing of each
	screen.  Until now, all of your /window create screens had to be 
	exactly the same size as your main screen or they wouldn't work.  
	That restriction has now been removed.  All of your screens can be
	of whatever size you wish and you can resize them at will.

*** News 11/13/2001 -- /FLUSH now uses the "redirect sink"
	Until now, /FLUSH worked by actually throwing away all data from
	the server until there was a 1 second pause.  Since none of this
	data was processed, if things like JOINs or QUITs or KICKs were
	thrown away, the client could become terribly confused and possibly
	even crash.  This has changed: now the /flush command does not
	throw away all input from the server, but instead just suppresses
	all output for the current server command.  This means that all of
	your /on's will still be processed, but you won't have to see the
	output (if you were doing a /who ** or a /links for exmaple).
	Bottom line: it is now safe to do /flush again!

*** News 11/13/2001 -- The "redirect sink" -- target 0, and practice uses
	You may now do /REDIRECT 0 to suppress all output from a server
	command.  Target 0 is called the "redirect sink" and any output
	that is redirected to it will NOT be displayed.  This technique
	is very useful for trapping only a few /on's for a complex query
	(such as /whois) and not having to worry about extra/unknown 
	numerics cluttering up the user's screen.  Consider this:

			on ^318 * { @count++ }
			redirect 0 whois hop

	Normally, if you were to do "whois hop", you would see all the other
	numerics, which would be ugly if you're trying to catch the whois
	replies with /on's.  This is especially true for networks which use
	extra numerics in their whois replies that your script may not know
	about.  So if you just /redirect 0 your server queries, then any
	/on's that you don't catch that would otherwise send output to the
	user's screen will redirect their output to the "sink", ie, it will
	not be displayed.  This should make it much easier to script whois
	replies.

*** News 11/12/2001 -- Changes to /SETENV let you unset environment variables
	You may now unset environment variables with the /SETENV command by
	prefixing the environment variable name with a single hyphen and by
	omitting the second argument, like so:
		/SETENV -IRCSERVER
	You can still set an environment variable that starts with a hyphen:
		/SETENV -FOO one two three
	You can unset an environment variable that starts with a hyphen:
		/SETENV --FOO
	You can set an environment variable with no value:
		/SETENV EMPTYVAR
	but you can't set an empty environment variable that starts with
	a hyphen (sorry).  If anyone ever finds that they actually need to
	be able to do this, let me know and we'll work something out.

*** News 11/12/2001 -- New built in functions for file manipulations
	Several new functions have been added to help you manipulate files
	that are opened with $open().

	$fskip(<fd>)
	   This function reads the next line of the file and discards it.
	   It returns the end-of-file condition of the file after the read.
	   If <fd> is not a valid file, -1 is returned.

	$fseek(<fd> <numbytes> <whence>)
	   This function changes the file position indicator.  The file
	   position indicator is moved <numbytes> (a 31 bit signed number)
	   away from <whence>, which is a symbolic anchor with the following
	   possible values:
		SET	Move <numbytes> from the beginning of the file
		CUR	Move <numbytes> forward or backward from the
			current file position indicator
		END	Move <numbytes> forward or backward from the
			end of the file.
	   <numbytes> can't be greater than 2GB, and this is a limitation
	   in the fseek(3) interface, so don't complain to me about it.
	   If a seek error occurs, -1 is returned and $error(<fd>) will
	   return 1.  If <fd> Is not a valid file, -1 is returned.

	$frewind(<fd>)
	   This function sets the file position indicator to the beginning
	   of the file.  It is the same as $seek(<fd> 0 SET).  If <fd> is
	   not a valid file, -1 is returned.

	$ferror(<fd>)
	   This function returns the file error indicator, either 0 or 1.  
	   This is set whenever any error occurs and can be cleared by 
           resetting the file position indicator.  If <fd> is not a valid
	   file, -1 is returned.

	$isfilevalid(<fd>)
	   This function returns 1 if <fd> is a valid value previously 
	   returned by $open() and returns 0 otherwise.

