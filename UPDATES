EPIC4-1.2.0

*** News 12/11/2002 -- Nick fudger now uses NICKLEN 005.

*** News 12/11/2002 -- /on DCC_RAW mask change
	The remote-port field of this hook in the "connection accepted"
	mode (where field 2 is "N") has changed.  Field 3 is now the
	_local_ port rather than the remote.  This probably won't be a
	problem for anyone, since the remote port is rather useless
	information on its own, and examination of some popular scripts
	bears this out.

	If this _is_ causing a problem for you, then you should contact
	#epic on efnet.

*** News 12/11/2002 -- /exec "-closein %proc" flag - better pipe control.
	This should make /exec much more useful for things like sort and
	md5sum which will only start "working" when their input closes.

*** News 12/11/2002 -- /alias arguments list "improvement".
	The "alias [alias] (arg, arg, args) { [body] }" form of /alias has
	been changed to work more like the documentation says it does.

	This means that (args words 2) will actually take 2 words from the
	args list.  In addition, if /xdebug extractw is on, then "double
	quoted words" will be treated as such too.

	There is a slight performance penalty for this and it can probably
	be improved.  It would be nice to be able to specify how double
	quoted words should be treated in the args list too.

*** News 12/11/2002 -- Enhanced autoget script.
	Autoget has three new commands:  /autoreget, /autoreject and
	/autoclobber.  The first two take masks for arguments, and the
	third is used to specify how autoreget will work.

	Also, the masks have changed.  You can still specify *.ext, but
	the mask will be matched against nick!user@host,IP,file.  This
	only matters if you currently use file* as a mask, in which case
	you need to specify *,*,file* or *file* now.

*** News 12/11/2002 -- String length limits on /pretend removed.
	The string length is now limited by the limits epic puts on a
	message received from the server.

*** News 12/11/2002 -- $tcl() - Tcl support.
	$tcl() will take a Tcl expression and evaluate it much like
	$perl() does with Perl expressions.  In addition, the tcl
	interpreter has an epic command which works like this:
	  * "epic cmd [epic command]" runs the epic command.
	  * "epic eval [epic command]" evaluates the epic command.
	  * "epic expr [epic expression]" returns whatever the epic
	    expression returns.

	There is no equivalent to $perlcall() just yet, and it may
	never come, so to escape quoting hell it is necessary to pull any
	data the expression requires into Tclspace via the epic command
	described above.

	Don't even bother trying this out just yet as the configure
	script hasn't quite been finished for this.  You need to specify
	--with-tcl when you run configure to get it working.

*** News 12/11/2002 -- Slightly enhanced flood detection
	New features:
	  * /SET FLOOD_RATE_PER acts as a divisor for FLOOD_RATE.
	  * /set FLOOD_MASKUSER to values 0, 1 or 2.
	  * $floodinfo(*) returns the internal counters that match *.
	  * Improved algorithm which will hopefully retain the flooders
	    longer when the buffer is too small to hold all of them.
	  * Returning 1 from the FLOOD hook will now cause the counters
	    for the user to be reset.

	When FLOOD_MASKUSER is set to 2, the internal counters apply to
	hosts only.  When it is 0, they apply to the user@host, which is
	the old behaviour.  When it is 1, the user@host is used if
	the user begins with an alphanumeric character, and only the
	host otherwise.  A value of 1 will probably catch most drones
	more effectively but the default is 0.

	The values returned by $floodinfo() are "lists of lists" and the
	fields for each list are:
	  * USER@HOST or @HOST
	  * Channel or *
	  * Message type
	  * Server
	  * Message count
	  * Seconds since first message

	This flood detection is still far from perfect or complete.  It
	is necessary for FLOOD_USERS to be at least as large as the
	number of flooders for it to work effectively.  If it is half
	that number, it will be struggling to keep up with half of them.

*** News 12/11/2002 -- New function $winline() - read window lines
	Like $line() but reads from the window instead of the lastlog
	buffer.

*** News 12/11/2002 -- New function $timerctl() - control timers
	Usage:
	------
	$timerctl(getrefnums)
	$timerctl(exists [ref])
	$timerctl(getcommand [ref])
	$timerctl(getargs [ref])
	$timerctl(gettime [ref])
	$timerctl(getevents [ref])
	$timerctl(getserver [ref])
	$timerctl(getwindow [ref])
	$timerctl(setcommand [ref] [value])
	$timerctl(setargs [ref] [value])
	$timerctl(settime [ref] [value])
	$timerctl(setevents [ref] [value])
	$timerctl(setserver [ref] [value])
	$timerctl(setwindow [ref] [value])

	$timerctl() will only operate on timers that already exist.  This
	is the initial release and it may be reworked at some point.

	With thanks to MaXxX.

*** News 12/11/2002 -- New function $exec()
	$exec() runs the command given and returns three pipes for STDIN,
	STDOUT and STDERR of the process.  These can be used with $read()
	and $write(), however reading from a pipe that is empty or
	writing to one that is full will cause epic to block and perhaps
	deadlock, so the semantics can be tricky.  This is not designed
	to be a replacement for /exec.

*** News 12/11/2002 -- $read($fd $bytes) now returns quoted strings.
	$read($fd $bytes) will now quote the dangerous characters listed
	below in the return value.  With the new function $asciiq()
	below, this gives the scripter the ability to read (but not yet
	write) binary data.

*** News 12/11/2002 -- New functions $asciiq and $chrq()
	These are designed to more easily handle binary data.  $asciiq()
	will translate \r, \n, \0, \a and \\ to CR, LF, NULL, 0x01 and
	"\" prior to returning the ascii values of the string.  $chrq()
	is the compliment of $asciiq().

*** News 11/26/2002 -- Restrictions on /TIMER within a /TIMER removed
	There are now no restrictions whatsoever about where and when 
	you can use /TIMER.  Until now, you could not update/change/delete 
	a timer while another TIMER was executing.  This was particularly 
	troublesome for people who wanted to be able to have a recurring 
	timer and then be able to deactivated it; the only way to do this 
	was with /defer.  Now you can /TIMER -delete it from within itself.

*** News 11/07/2002 -- /XECHO -W now takes channel argument
	Until now, the argument to /XECHO -W had to be a window refnum.
	Now you can provide a channel as the argument, and epic will 
	output to that channel's window.  Please be aware that the channel
	you provide will be looked for in the "current server", so make
	sure that is really what you want.  This is useful in /ONs when
	you want to output something but you can't be bothered to look up
	the channel's refnum.  For example:
		on join * { xecho -w $1 BOOYA BOOYA BOOYA BOO!  }

*** News 11/07/2002 -- $center() improved
	$center() was rewritten here, so if you see any problems, this is
	probably when they were introduced.

*** News 11/07/2002 -- $geom() can now take a window reference
	Until now, $geom() returned the size of the screen as reported 
	by your TERM setting.  This was not always entirely useful.  The
	size returned is now always the 'true size' of the screen.  You 
	can also give it a window reference (eg, on another screen) to get
	the geometry of a secondary screen.  This is important now that 
	screens can be independantly sized.

*** News 11/07/2002 -- /WINDOW NAME now takes extended words as arguments
	You can now give a window a name with spaces in it by surrounding
	the entire name with double quotes.  For example:
		/window name "My Window #1"

*** News 09/27/2002 -- New function $logctl() - control logfiles
	This has actually existed since 09/03/2002, but I forgot to document
	it, so here goes!

	Usage:
	------
	$logctl(REFNUM log-desc)
	$logctl(ADD log-desc [target])
	$logctl(DELETE log-desc [target])
	$logctl(GET <refnum> [ITEM])
	$logctl(SET <refnum> [ITEM] [VALUE])
	$logctl(MATCH [pattern])
	$logctl(PMATCH [pattern])

	where [ITEM] is one of the following
	      REFNUM          The refnum for the log (GET only)
	      NAME            The logical name for the log
	      FILENAME        The filename this log writes to
	      SERVER          The server this log associates with (-1 for any)
	      TARGETS         All of the targets for this log
	      LEVEL           The Lastlog Level for this log
	      REWRITE         The rewrite rule for this log
	      MANGLE          The mangle rule for this log
	      STATUS          1 if log is on, 0 if log is off.
              TYPE            The type of the log (SERVERS, WINDOWS, TARGETS)

*** News 09/26/2002 -- New /WINDOW verbs, SEARCH_BACK and SEARCH_FORWARD
	These two window verbs take a regular expression (regex) and scroll
	backward or scroll forward to the previous or next line which 
	matches the regex, and makes that matching line the top of the 
	screen.  For example:
		/WINDOW SEARCH_BACK foo
	will scroll your window backwards until it finds a line that 
	contains the string "foo"; that line will be put at the top of 
	the window.

	If you search backwards or forwards, and there are no matches
	in the direction you're going, then this operation will beep 
	and will not change your display.

	Please remember that these operations put you into scrollback mode,
	so you will need to use the SCROLL_END keybinding to see any new 
	output that arrives.

*** News 09/26/2002 -- Decoupling of /FLUSH and /WINDOW FLUSH
	Previously, if you did /FLUSH, it threw away data from the server
	and also threw away your hold buffer.  Now that there is no hold
	buffer, it becomes less sensible for /FLUSH to force you to throw
	away something that doesn't really exist.  So /FLUSH now only
	throws away data from the server but does not mess with your
	scrollback buffer.  If you want to mess with your scrollback buffer
	you can of course always do /WINDOW FLUSH.

*** News 09/26/2002 -- Refinement of /WINDOW FLUSH
	Now that there is no distinction between the scrollback buffer and
	the hold buffer, it is not possible for /WINDOW FLUSH to remove the
	hold buffer.  So /WINDOW FLUSH has changed; what it does now is throw
	away everything in your scrollback buffer below whatever is currently
	on your screen, and it turns off /WINDOW HOLD_MODE and it turns of
	scrollback mode.

*** News 09/26/2002 -- Mostly broken feature /WINDOW SCROLL now totaly broken
	The /WINDOW SCROLL feature which did not work properly now is 
	completely useless.  The value of /WINDOW SCROLL is ignored; all
	windows must scroll.

*** News 09/26/2002 -- Refinement of meaning of /WINDOW HOLD_MODE ON
	When you have /WINDOW HOLD_MODE on, the top of the window is fixed;
	it is held; it will not move unless you move it.  Now that the hold
	buffer and scrollback buffer are fully integrated, you can move 
	forward through the hold buffer by using the SCROLL_FORWARD keybinding,
	just as if you were being scrolled back.  Please remember that if you
	have /WINDOW HOLD_MODE ON, it does not act like normal scrollback 
	functionality; when you reach the bottom of the hold buffer, it will
	never automatically turn HOLD_MODE off.  You must do that yourself.
	This is to maintain backwards compatability.

*** News 09/26/2002 -- /SET HOLD_MODE and /SET HOLD_MODE_INTERVAL now scripted
	The /SET HOLD_MODE and /SET HOLD_MODE_INTERVAL sets have always been
	aliases for /WINDOW HOLD_MODE and /WINDOW HOLD_MODE_INTERVAL.  So the
	hardcoded /SETs have been removed from EPIC and script compatability
	shims have been put into the 'basical' script which is loaded when
	you start EPIC.  Unless you don't use epic's scripts, you will not
	notice any change.

*** News 09/26/2002 -- Remove /WINDOW SCRATCH (unnecessary)
	As part of the integration of scrollback and hold buffers, every
	window was made capable of supporting /XECHO -LINE.  In simple
	terms, every window is now a scratch window, so you no longer need
	to /WINDOW SCRATCH ON before you use /XECHO -LINE.

*** News 09/26/2002 -- Finished integration of scrollback and hold buffers
	The primary change you will notice is when you are using scrollback
	and you reach the "scrollback point", you will no longer turbo-scroll
	to the end of the hold buffer.  This annoying "feature" was due to
	the incomplete integration of the scollback and hold buffers.  You
	are now able to scroll back and forth freely through both the scroll
	back and hold buffers, and you do not leave scrollback mode until you
	reach the end of the hold buffer.

*** News 09/11/2002 -- New window verb, /WINDOW MOVE_TO
	The /WINDOW MOVE_TO <N> verb makes the operative window the Nth 
	window on the screen (counting from 1, just as /WINDOW GOTO does)
	For example, if your screen has five windows, (A B C D E), and you 
	go to window D and do /WINDOW MOVE_TO 2 then your screen will be 
	re-ordered to (A D B C E).  If <N> is less than 1, then this 
	command does nothing.  If <N> is greater than the number of windows
	on the screen, the operative window is made the last window on 
	the screen.  Nothing about the content of any window changes -- 
	only the order they appear on the screen.

*** News 09/03/2002 -- New built in command, /LOG, general purpose log files
	General Purpose Log Files work quite a bit like windows, but instead
	of displaying to your screen, they write to a file.

	Each /LOG command works by choosing a logfile, and then performing
	one or more actions upon it -- just like the /WINDOW command.
	However, there is no concept as a "current logfile" so each time you
	use the /LOG command you need to re-specify the log you want to use.

	These are the operations currently supported by /LOG

	Options that modify the log's configuration
	-------------------------------------------
		NEW		
			Create a new logfile to work on.
		REFNUM <name|number>
			Work on the specified log file, using either it's
			name (see below) or its refnum.
		NAME <name>
			Change the logical name of the logfile to <name>.
			You can use <name> in /LOG REFNUM later.
		FILENAME <name>
			Change the filename that this log writes to.  You
			MUST specify a filename before you can turn a log ON!
		TYPE
			Each logfile can log one of three different "types"
			of things; either a list of nicks or channels 
			("TARGETS"), a list of windows ("WINDOWS") or a list
			of servers ("SERVERS").  The default type is TARGETS.
			WARNING!  If you use /LOG TYPE, all of the current
			targets you have added to the log will be destroyed,
			even if you don't change the type!  This is how you 
			can destroy the target list if you want to start over.
		SERVER <server refnum>
			Change the server this logfile belongs to.  By default
			the log belongs to whatever the current server was
			when it was created.  If you use the special server
			refnum -1, then the log works for all servers.
		LEVEL <levels>
			The lastlog levels to send to this log.  ALL is the
			default.

	Options that modify the log's state
	-----------------------------------
		ON
			Turn the logfile on.
		OFF
			Turn the logfile off.

	Options that modify the log's target list
	-----------------------------------------
		ADD <nick|channel|refnum>[,<nick|channel|refnum>...]
			If the log is of "TARGET" type, then add a list of 
			one or more nicks or channels to the current target
			list.  If the log is of "WINDOW" or "SERVER" type,
			then add a list of one or more window or server
			refnums to the list.
		REMOVE <nick|channel>[,<nick|channel>...]
			If the log is of "TARGET" type, then remove a list of 
			one or more nicks or channels to the current target
			list.  If the log is of "WINDOW" or "SERVER" type,
			then remove a list of one or more window or server
			refnums to the list.

	Options that modify how the log writes to the logfile
	-----------------------------------------------------
		MANGLE
			Change how stuff written to the log will be "mangled".
			By default, the logfile will be mangled by whatever 
			/SET MANGLE_LOGFILES is set to.
		REWRITE
			Change how stuff written to the log will be "rewritten".
			By default, the logfile is rewritten by whatever 
			/SET LOG_REWRITE is set to.

	Other options
	-------------
		KILL
			Irreversably destroy a logfile.  Once you kill a 
			logfile, you cannot operate on it again.
		DESCRIBE
			Give detailed information about the current state
			of the logfile.
		LIST
			Give brief information about all logfiles.


	Examples:
	---------
	If you wanted to log #epic, you could do something like this:
		/LOG NEW NAME epic-log FILENAME ~/logs/#epic ADD #epic ON
	Then if you wanted to close that log later you could do
		/LOG REFNUM epic-log OFF
	or
		/LOG REFNUM epic-log KILL

	If you wanted to log anything that went to windows 2 or 3:
		/LOG NEW NAME mywinlog FILENAME ~/logs/win23 TYPE windows
		/LOG REFNUM mywinlog ADD 2,3 ON

	If you wanted to log anything that happened on server 2:
		/LOG NEW NAME servlog FILENAME ~/logs/serv2 TYPE servers
		/LOG REFNUM servlog ADD 2 ON

# End of file
